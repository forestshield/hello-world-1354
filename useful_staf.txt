-------------------------------------
gcc on mac location
	/Users/admin1/.stack/programs/x86_64-osx/ghc-8.8.3/bin
------------------------
.stack        

---------------------------------------
project executable (for project L4)
~Haskell/PROJECTS/L4/.stack-work/install/x86_64-osx/82bf768a522c04d0dbd67debf60484f294ea19e3104507f2bd835c36989c88f6/8.8.3/bin/L4-exe





————
build exe using ghc
   	stack ghc -- Main.hs -o testprogram2
	stack ghc first_prog.hs

—————
show/hide hidden files in finder
in terminal type:
	defaults write com.apple.finder AppleShowAllFiles YES
right click on finder window in launch bar holding car-alt, choose “Relanch”

:set prompt "λ> "
:set prompt "\x03BB> "
:set prompt "%s\n\x03BB> "
:set prompt "\955>"
:set prompt "%s--------------------------------------------\nλ>"
:set prompt “%s_____________________________________________\nλ>"
:set prompt "%s ------------------ \x03BB> "
:set prompt "\ESC[1;34m%s\n\ESC[0;34mλ> \ESC[m"
-- this one sets color to red -----
:set prompt "\ESC[1;31m%s ---------------------------------\n\ESC[0;31mλ> \ESC[m"


SET REPL PROMPT PERMANENTLY (WHEN STACK IS INSTALLED
put this line “:set prompt "\ESC[1;34m%s\n\ESC[0;34mλ> \ESC[m" in a file
ghci.conf
put this file into directory :
~.ghc
N.B. “\ESC[m” reverts everything back to normal




—————
create a new project from template
stack new prRio3 rio

—————
create a new project from default new template
stack new prNew1

—————
$ghc templates.hs -XTemplateHaskell
{-# LANGUAGE TemplateHaskell -#}

—————
stack build --test
stack build --test --bench --haddock

Common flags
--file-watch will run build in file-watch mode, where it will wait for changes to files and then automatically rebuild. This can be very convenient to run in a terminal while simulatenously editing in another window.
--fast will disable optimizations
--pedantic turns on -Wall -Werror for GHC (all warnings on, and warnings treated as errors)
So throwing a few of these together:
stack build --test --file-watch --fast --pedantic
stack test

————-
root of the Project
stack install hint 
Installation path /Users/admin1/.local/bin
to check all hs files
  /Users/admin1/.local/bin/hlint src --report >> rep5.txt
for a single file
  /Users/admin1/.local/bin/hlint Lib.hs >> rep5.txt


——————————————————
vs code terminal colors settings change


/Users/admin1/Library/Application Support/Code/User/settings.json

{
    "workbench.colorTheme": "Visual Studio Light",
    "editor.fontSize": 14,
    "terminal.integrated.fontSize": 14,
    "window.zoomLevel": 0,
    "editor.tabCompletion": "on",
    "editor.tabSize": 2,
    "terminal.integrated.automationShell.osx": ""

    "workbench.colorCustomizations": {
        "terminal.background":"#05010a",
        "terminal.foreground":"#00caaf",
        
        ...
      }
 }



    "workbench.colorCustomizations": {
        "terminal.background":"#05010a",
        "terminal.foreground":"#12be12",
        "terminal.ansiGreen": "#ff0000",
        "terminal.selectionBackground": "#c591f5",
        "terminal.selectionForeground": "#05010a",
        ...
      }
    

———————————————————
change colors in terminal on mac
https://www.google.ca/search?q=how+to+customize+prompt+color+in+terminal+mac&source=lmns&bih=885&biw=1012&hl=en-US&ved=2ahUKEwiNpKDbseHqAhVCTK0KHS8PBEUQ_AUoAHoECAEQAA

1. create file .bash_profile (could be in your home dir /Users/admin1)
place there this code
——
export CLICOLOR=1
#LSCOLORS=exfxcxdxbxegedabagacad
export LSCOLORS=GxFxCxDxBxegedabagaced
———

run in terminal command
source ~./bash_termnial
relaunch terminal

—————————————————
change colors in terminal other way
.bash_terminal
use nano editor 
——
export PS1="________________________________________________________________________________\n| \w @ \h (\u) \n| => "
export PS2="| => "

------------------------------------------------------------
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad

----------------------------------------------
Repl stuff -----
----------------------------------------------
:reload	:r	Code reload
:type	:t	Type inspection
:kind	:k	Kind inspection
:info	:i	Information
:print	:p	Print the expression
:edit	:e	Load file in system editor
:load	:l	Set the active Main module in the REPL
:module	:m	Add modules to imports
:add	:ad	Load a file into the REPL namespace
:instances	:in	Show instances of a typeclass
:browse	:bro	Browse all available symbols in the REPL namespace
----------------------------------------------
The introspection commands are an essential part of debugging 
and interacting with Haskell code:
----------------------------------------------
λ: :type 3
3 :: Num a => a

λ: :kind Either
Either :: * -> * -> *

λ: :info Functor
class Functor f where
  fmap :: (a -> b) -> f a -> f b
  (<$) :: a -> f b -> f a
        -- Defined in `GHC.Base'
  ...
λ: :i (:)
data [] a = ... | a : [a]       -- Defined in `GHC.Types'
infixr 5 :

----------------------------------------------
Querying the current state of the global environment in the shell is also possible. 
For example, to view module-level bindings and types in GHCi, run:
λ: :browse
λ: :show bindings

----------------------------------------------
To examine module-level imports, execute:
λ: :show imports
import Prelude -- implicit
import Data.Eq
import Control.Monad

----------------------------------------------
Language extensions can be set at the repl.
:set -XNoImplicitPrelude
:set -XFlexibleContexts
:set -XFlexibleInstances
:set -XOverloadedStrings

----------------------------------------------
To see compiler-level flags and pragmas, use:
λ: :set
options currently set: none.
base language is: Haskell2010
with the following modifiers:
  -XNoDatatypeContexts
  -XNondecreasingIndentation

----------------------------------------------
GHCi-specific dynamic flag settings:
other dynamic, non-language, flag settings:
  -fimplicit-import-qualified

----------------------------------------------
warning settings:
λ: :showi language
base language is: Haskell2010
with the following modifiers:
  -XNoDatatypeContexts
  -XNondecreasingIndentation
  -XExtendedDefaultRules

----------------------------------------------
Language extensions and compiler pragmas can be set at the prompt. 
See the Flag Reference for the vast collection of compiler flag options.
Several commands for the interactive shell have shortcuts:

Function
+t	Show types of evaluated expressions
+s	Show timing and memory usage
+m	Enable multi-line expression delimited by :{ and :}.
λ: :set +t
λ: []
[]
it :: [a]
λ: :set +s
λ: foldr (+) 0 [1..25]
325
it :: Prelude.Integer
(0.02 secs, 4900952 bytes)
λ: :set +m
λ: :{
λ:| let foo = do
λ:|           putStrLn "hello ghci"
λ:| :}
λ: foo
"hello ghci"

——————————————————————
In Visual Studio Code version 1.0, you can now select columns by holding down Shift + Alt , then click and drag with the mouse. This can also be done using just the keyboard by holding down Ctrl + Shift + Alt and then using the arrow keys


