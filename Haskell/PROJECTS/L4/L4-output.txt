############ Console Output Starts here ############
N.B. Some outputs, produced by exteranl apps, like Main.c, Main.java etc.
N.B. !!! To print properly Unocode strings on Windows PowerShell and avoid console eception
*** Exception: <stdout>: hPutChar: invalid argument (invalid character)
type "chcp 65001" in powershell before using ghci !!!
use ConEmu on Windows, "https://www.fosshub.com/ConEmu.html"

================================= Lib ===================================
"darwin"
"x86_64"
"ghc"
Version {versionBranch = [8,8], versionTags = []}
"/Users/admin1"
False
True
True
λλλ, 2 == 2.0
True
λλλ, 2.0 == 2.1
False
True λλλ, 'a' < 'b'
False λλλ, Julie == Chris
True λλλ, Julie > Chris
True λλλ, Julia < Julie
False λλλ, Yulia < Julie

====================== System OS Stuff ============================
MacOSX
False['a', 'b'] > ['b', 'a']
FalseTrue, not bVal1
True, True && True
True, False || True
bt = 'Truthin'if True then bt else bf
 Test Truthin, if True then bt else bf
Cool
Not Cool
..........
fst=False, twoT2(False, True)
snd=False, swap twoT2 (False, True)
fst3=5, treeT(5, 'a', 'abc')
snd3='a', treeT(5, 'a', 'abc')
trd3="abc", treeT(5, 'a', 'abc')
fst=8, mTulp1(8, 'Julie'), isInteger = True
fst="Julie", mTulp2('Julie', 8), isInteger = False
snd="Julie", mTulp1(8, 'Julie'), isString = True
snd=8, mTulp2('Julie', 8), isString = False
tupFunc (3,[3]) (5,[5]) = (8,[3,5])
Blah changeMood 5
Woot changeMood Woot
..... addZero for 'a'  '2a' '2a1b' .....
"0a"
"2a"
"2a1b"
..... Int bounds .....
-128
127
-32768
32767
-2147483648
2147483647
-9223372036854775808
9223372036854775807
-9223372036854775808
9223372036854775807
..... Unicode strings .....
abc
^$&λ>a
TIO.putStrLn Lambda: λ
putStrLn Lambda: λ
Хорошего нам всем века, года, месяца, дня, жизни! :)
哈斯克尔7.6.1
Cheese
धर्म
 श्रेयान्स्वधर्मो विगुणः परधर्मात्स्वनुष्ठितात्।स्वधर्मे निधनं श्रेयः परधर्मो
"\1061\1086\1088\1086\1096\1077\1075\1086 \1085\1072\1084 \1074\1089\1077\1084 \1074\1077\1082\1072, \1075\1086\1076\1072, \1084\1077\1089\1103\1094\1072, \1076\1085\1103, \1078\1080\1079\1085\1080! :)"
"\21704\26031\20811\23572\&7.6.1"
"Cheese"
'a'
'\955'
abc
^$&λ>a
..... Unicode strings with Data.Text .....
================================= Lib2 ===================================
"\1061\1086\1088\1086\1096\1077\1075\1086 \1085\1072\1084 \1074\1089\1077\1084 \1074\1077\1082\1072, \1075\1086\1076\1072, \1084\1077\1089\1103\1094\1072, \1076\1085\1103, \1078\1080\1079\1085\1080! :)"
"\21704\26031\20811\23572\&7.6.1"
"Cheese"
'a'
'\955'
abc
^$&λ>a
TIO.putStrLn Lambda: λ
putStrLn Lambda: λ
Хорошего нам всем века, года, месяца, дня, жизни! :)
哈斯克尔7.6.1
Cheese
धर्म
 श्रेयान्स्वधर्मो विगुणः परधर्मात्स्वनुष्ठितात्।स्वधर्मे निधनं श्रेयः परधर्मो
 श्रेयान्स्व{धर्म}ो विगुणः पर{धर्म}ात्स्वनुष्ठितात्।स्व{धर्म}े निधनं श्रेयः पर{धर्म}ो
............................
 ... hello world!
hello <from main> world!
e λλλ hello world!
hello <funcLikeMain> world!
............................
4
6
............................

----------- Lib4 -------------------------

"darwin"
"x86_64"
"ghc"
Version {versionBranch = [8,8], versionTags = []}
funcSI1main

"------- Working with Lists ------"
putStrLn Lambda: λ someFuncLib4
["Papuchon","curry",":)"]
["Papuchon","curry",":)","Quake","The Simons"]
[["Papuchon","curry",":)"],["Quake","The Simons"]]
["Papuchon","curry",":)","Quake","The Simons"]
True
length allAwesome = 2
length (concat allAwesome) = 5
.......isPaliandrome  'abcd' ...............
False
.......isPaliandrome2  'eabae' ...............
True
.......myAbs (-4) ...............
4
.......myAbs2 5 ...............
5


.......simpliest func with Lambda syntaxis ..........
id :: a -> a    -- type singnature
id x = x        -- regular definition
id = \x -> x    -- lambda syntaxis definition
Anonimus function devinision, aka labmda-expression
"xxx"
5
[1,2,4]
(5,"tuples")
....... applyTwice ..........
11
13
"cba"
13
....... applyThree ..........
11
14
"cba"


....... Algebraic Datatypes ..........
Car {company = "lexus", model = "RX350", year = 2014}
Car {company = "lexus", model = "RX350", year = 2014}
True
c4 of Car2 cannot be compared or shown, because of it's constructor ?!
c4 of Car2: probably this is a bad/wrong constructor for Car2 ("lexus",  "RX350",  2014)
Car2: all others constructors are OK, c3, c5 and for Car c1 and c2 the same.    Car2 "lexus"  "RX350"  2014
  but c3 or c5 Car2 can: Car2 {company = "lexus", model = 'RX350', year = 2014}
Car2 {company2 = "lexus", model2 = "RX350", year2 = 2014}
Car2 {company2 = "lexus", model2 = "RX350", year2 = 2014}
True


----- Values, Functions and Types -----------
26, inc (square 5)
36, square (inc 5)
"average (inc 3) (inc 5)  -- fails, wrong type of inc for average"
5.0, average (inc2 3) (inc2 5)
10.0, arithmetic_mean 9 11
9.9, harmonic_mean 9 11
11, max' 9 11
-1, signum' (-11)


-- Binders — Associating Names with Values or Functions

---------- Useful functions on lists ----------------
True, elem 3 is lSample1 [1, 2, 3, 4]
10, sum [1, 2, 3, 4]
24, product [1, 2, 3, 4]
'z', maximum ['a', '0', 'C', 'd', 'e', 'z']
'0', minimum ['a', '0', 'C', 'd', 'e', 'z']
8, maximum [1, 8, 3, (-4)]
-4, minimum [1, 8, 3, (-4)]
lStr3 = elem 2 "AbcdeFg"
lStr4   = maximum "AbcdeFg"
'z', last ['a', '0', 'C', 'd', 'e', 'z']
"a0Cde", init ['a', '0', 'C', 'd', 'e', 'z']
False, null [1, 2, 3, 4]
False, null' "abc" :: [Char]
-- the last one does not compile without type specification for "abc" :: [Char]
True, null []
[13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,208,221,234,247,260,273,286,299,312], take 24 [13, 26 .. ]
"abcdEabcdEabc", take 13 (cycle "abcdE")



---- List Comprehension and iterate ------
[2,4,6,8,10,12,14,16,18,20], [x*2 | x <- [1 .. 10]]
[12,14,16,18,20], [x*2 | x <- [1..10], x*2 >= 12]
[1,2,4,8,16,32,64,128,256,512], take 10 (iterate (2*)1)
[1,8,22,50,106,218,442,890,1786,3578], take 10 (iterate (\x -> (x+3) * 2) 1)
---- list replicate, repeat ------
[5,5,5], replicate 3 5
"aaa", replicate 3 'a'
["a","a","a"], replicate 3 "a"
[5,5,5,5,5,5,5,5,5,5], take 10 repeat 5
---- list cycle ------
"LOL LOL LOL ", take 12 (cycle "LOL ")
[1,2,3,1,2,3,1,2,3,1], take 10 (cycle [1,2,3])


--- All numbers from 50 to 100 whose remainder when divided with the number 7 is 3
[52,59,66,73,80,87,94], [ x | x <- [50..100], x `mod` 7 == 3]


 -- All numbers from 10 to 20 that are not 13, 15 or 19
[10,11,12,14,16,17,18,20], [ x | x <- [10..20], x /= 13, x /= 15, x /= 19]


----- All the possible combinations between numbers in two lists ------
[16,20,22,40,50,55,80,100,110], [ x*y | x <- [2,5,10], y <- [8,10,11]]

 --This function replaces every element of a list with 1 and then sums that up
6, length' xs = sum [1 | _ <- xs],  length' "a2b4c6"



--Function that takes a string and removes everything except uppercase letters from it
"ETGD", removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']],   "EveryThing is GooD!"



-- Remove all odd numbers without flattening the list.
xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]], [ [ x | x <- xs, even x ] | xs <- xxs]



---- Error Customization ----
----  ----
-4, minimum [1, 8, 3, (-4)]
"elloH", mangle "Hello"
"", mangle ""
"I", mangle "I"
---------- zip function, creates list of tuples ---------
[(1,"one"),(2,"two"),(3,"three"),(4,"four"),(5,"five")], zip [1 .. 5] ["one", "two", "three", "four", "five"]
[(1,5),(2,5),(3,5),(4,5),(5,5)], zip [1,2,3,4,5] [5,5,5,5,5]
---------- right triangles ---------
triangles      = [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10] ]
rightTriangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2
rightTriangles = [(3,4,5),(6,8,10)]

----------- compare -------------------------
LT,  "Abrakadabra" `compare` "Zebra"
True, "Abrakadabra" < "Zebra"
GT, 5 `compare` 3
EQ, 5 `compare` 5

------------- read ----------------------------
True, read "True" || False
12.0, read "8.2" + 3.8
[1,2,3,4,99], read "[1,2,3,4]" ++ [99]

------- read as ...
5, read "5" :: Int
5.0, read "5" :: Float
20.0, (read "5" :: Float) * 4
[1,2,3,4], read "[1,2,3,4]" :: [Int]
(3,'a'), "(3, 'a')" :: (Int, Char)

------------- enum, funcs pred and succ ---------------------
Types in this class: (), Bool, Char, Ordering, Int, Integer, Float and Double
"abcde", ['a'..'e']
[LT,EQ,GT], [LT .. GT]
[3,4,5], [3 .. 5] 
'C', succ 'B' 
'A', pred 'B'

------------- Bounded ---------------------
-9223372036854775808, (minBound :: Int)
9223372036854775807, (maxBound :: Int)
'\NUL', (minBound :: Char)
'\SOH', succ (minBound :: Char)
'\1114110', pred (maxBound :: Char)
'\1114111', (maxBound :: Char)
True, (maxBound :: Bool)
-128, (minBound :: Int8)
2147483647, (maxBound :: Int32)

------------- fromIntegral -------------
-32764.8, fromIntegral (minBound :: Int16) + 3.2 
But, (minBound :: Int16) + 3.2 -- compiler error

------------- Tuples Third -------------
(1,2,3),   ((first (1,2,3)), (second (1,2,3)), (third (1,2,3)))
first (x, _, _) = x
second (_, y, _) = y
third (_, _, z) = z

------------- Pattern Matching with "Catch all case" -------------
("One!","Two!","Three!","Not between 1 and 3"),
 ((sayMe 1 = "One!"), (sayMe 2 = "Two!"), (sayMe 3 = "Three!"), (sayMe x = "Not between 1 and 3"))


------------- Pattern Matching in addVectors -------------
(3,5), addVectors (1, 2) (2, 3)
addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

------------- Pattern Matching in List Comprehension -------------
[4,7,6,8,11,4], [a+b | (a,b) <- [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]]


------------- Pattern Matching & customization of the error -------------
((),'H'), ({-head' [] :: Int-}), (head' "Hello")
N.B. head' on empty list commented, Exception

------------- Pattern Matching tell function -------------
("The list is empty","The list has one element: 1","The list has two elements: 1 and 2","This list is long. The first two elements are: 1 and 2"), tell ([] :: [()]), tell [1], tell[1,2], tell[1,2,3]


------------- different length funcs -------------
(1,2,3), length ("a" :: String), length' "ab", length'' "abc"


------------- Functinon all  -------------
(True,True,False), (all (<10) [1,3,5,7,9]), (all even [2,4,6,8,10]), (all ( \x -> (x*x)/4 > 10) [5,10,15])


------------- calcBmis with guards -------------
[24.691358024691358,23.545706371191137,24.167162403331353], calcBmis [(80, 1.8), (85, 1.9), (65, 1.64)]


------------- let <Bindings> in <Expression> -------------
[(25,9,4)], [let square x = x * x in (square 5, square 3, square 2)]


------------- more let <Bindings> in <Expression> -------------
(6000000,"Hey there!"), (let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar)


------------- more let <Bindings> in <Expression> -------------
600, (let (a,b,c) = (1,2,3) in a+b+c) * 100


------------- Recursions -------------
([2,4,4,8,9,10],"        abcdeeefghhijklmnoooopqrrsttuuvwxyz",[(-99,4.0,2),(-99,5.0,-100),(3,1.0,6),(3,4.0,8),(10,2.0,5)],[-99.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,6.0,8.0,9.0,10.0])
quicksort [10,2,4,4,8,9]
quicksort "the quick brown fox jumps over the lazy dog"
quicksort [(10,2,5), (3,1,6), (-99,4,2), (3,4.0,8), (-99,5,-100)]
quicksort [10,2,5,3,1,6,-99,4,2,3,4.0,8,9]

------------- curry -------------
(135,135),  (multThree 3 5 9), (((multThree 3) 5) 9)
multThree :: (Num a) => a -> a -> a -> a == multThree :: (Num a) => a -> (a -> (a -> a))

------------- curry, using function with too few parameters
---------------- or partialy applyed function -------------
54, (multTwoWithNine 2 3), where (multTwoWithNine = multThree 9)
and (multThree x y z) -- should be 3 parameters 

------------- curry, using function with too few parameters
---------------- or partialy applyed function -------------
(GT,GT), compare 10 9, (compare 10) 9


------------- partialy applyed infix function -------------
(20.0,20.0,20.0), "200 / 10" == "divideByTen 200" == "(/10) 200"


------------- applyTwice again -------------
(16,"hey HAHA HAHA","HAHA HAHA hey",1440,[3,3,1]),
(applyTwice (+3) 10), (applyTwice (++ " HAHA") "hey"), (applyTwice ("HAHA " ++) "hey")
(applyTwice (multThree 3 4) 10), (applyTwice (3:) [1])

------------- zipWith' using a lambda notation in a second example -------------
([9,11,3],[7,10,13,16],[8.0,4.5,3.0],[5.0,25.0,125.0,625.0,3125.0,15625.0,78125.0,390625.0,1953125.0,9765625.0],[153.0,61.5,31.0,15.75,6.6]), 
zipWith' (+) [1,2,3] [8,9,0] 
zipWith' (\x y -> 2*x + y) [1..4] [5..8]
nzipWith' (/) [8,9,9] [1,2,3] 
zipWith' (**) (replicate 10 5) [1..10] 
zipWith' ( b -> (a * 30 + 3) / b) [5,4,3,2,1] [1,2,3,4,5]

------------- gcd greates common divisor -------------
(4,4), (gcd 12 8) (gcd 12 (gcd 16 8))


------------- flip -------------
(2.0,True,0), flip (/) 1 2), flip (>) 3 5), flip mod 3 6


------------- gcd'' 13 36 96  -- gcd'' with 3 agruments -------------
(12,12,12,12),
(gcd'' 12 36 96)
(gcd' 12 $ gcd' 36 96)
(gcd' (gcd' 12 36) 96)
(gcd' (gcd' 12 96) 36)


------------- Syntactic Sugar -------------
(True,True,[1,2,3],[1,2,3]), 
(5 `elem` [1,5,6]), sugar for  (elem 5 [1,5,6])
[1, 2, 3]), sugar for  (1:2:3:[])


------------- lcm -- lowest common multiple -------------
(60,24), (lcm' 5 12), (lcm' (-6) 8)


------------- lcm'' with 3 arguments -------------
(60,60,60), (lcm'' 12 4 5), (lcm' 12 $ lcm' 4 5), (lcm' 5 $ lcm' 12 4)


------------- map -------------
([1,3,4,12],["cba","adc","4321"],[3,6,9,12],[-1.0,-0.25,0.2,-10.0],[3,8,9,8,7])
map abs [-1,-3,4,-12]
map reverse ["abc""cda","1234"]),
map (3*) [1,2,3,4] )
map (recip . negate) [1,4,-5,0.1])
map (\(a,b) -> a + b) [(1,2),(3,5),(6,3),(2,6),(2,5)])


------------- foldl -------------
(2.0,3.0,5,7,43)
foldl (/) 64 [4,2,4]
foldl (/) 3 []
foldl max 5 [1,2,3,4]
foldl max 5 [1,2,3,4,5,6,7]
(foldl (\x y -> 2*x + y) 4 [1,2,3]

------------- Succincity, because of CURRYING !!! -------------
"!!!!!    "(foo a = bar b a)" == "(foo = bar b)"     !!!!!
"sum1 xs = foldl (\acc x -> acc + x) 0 + xs"  == "sum2 = foldl (+) 0", NO xs here! it can be omited

------------- filter -------------
([6,7,8],[3,7,9],["bbbbbbbbbbbbb"],"uagameasadifeent","GAYBALLS")
filter' (>5) [1,2,3,4,5,6,7,8]
filter' odd [3,6,7,9,12,14]
filter2 (\x -> length (x :: String) > 4) ["aaaa","bbbbbbbbbbbbb","cc"]
filter (`elem` ['a'..'z']) "u LaUgH aT mE BeCaUsE I aM diFfeRent"
filter (`elem` ['A'..'Z']) "i lauGh At You BecAuse u r aLL the Same"

------------- The sum of all odd squares that are smaller than 10,000.
First, we'll begin by mapping the (^2) function to the infinite list [1..].
Then we filter them to get the odd ones. Then, we'll take elements from that list
while they are smaller than 10,000. Finally, we'll get the sum of that list. -------------
(166650,166650), sum (takeWhile (<10000) (filter odd (map (^2) [1..])))
sum (takeWhile (<10000) [n^2 | n <- [1..], odd (n^2)]) - list comprehention

------------- simple map ... -------------
([1,3,3,4],[0,0,0,0],[1.0,3.0,3.0,4.0],[Infinity,Infinity,Infinity,Infinity]), 
map (+ 0) [1, 3, 3, 4]
map (* 0) [1, 3, 3, 4]
map (/1 0) [1, 3, 3, 4]
map (/ 0) [1, 3, 3, 4]

------------- some trics using map -------------
20, (map (*) [0..]) !! 4) 5

------------- Collatz sequences -------------
66, length (filter (\xs -> length xs > 15) (map chain [1..100]))

------------- (foo a = bar b a) == (foo = bar b) -------------
(14,22,22), (fnAddTwo 8 6)   fnAddLong 12)   (fnAddShort 12)
defnitions ... fnAddLong n = fnAddTwo 10 n ... fnAddShort = fnAddTwo 10
(fnAddLong n = fnAddTwo 10 n) == (fnAddShort = fnAddTwo 10) !!!

------------- elem implementaion with foldl and foldr -------------
(False,True), (elem2 9 [1,2,3,4,5,6,7]), (elem3 5 [1,2,3,4,5,6,7])
elem2 y ys = foldl (\acc x -> if x == y then True else acc) False ys
elem3 y ys = foldr (\x acc -> if x == y then True else acc) False ys

------------- foldl vs foldr -------------
(2.0,0.125,15,15,10.125,12.0), 
(foldl (/) 64 [4,2,4]) vs (foldr (/) 64 [4,2,4])
(foldl (+) 5 [1,2,3,4]), (foldr (+) 5 [1,2,3,4])
(foldl (\x y -> (x+y)/2) 54 [12,4,10,6]), (foldr (\x y -> (x+y)/2) 54 [12,4,10,6])

------------- EnumFrom -------------
("abcdefghij",[23,24,25,26,27,28,29,30,31,32],[BB,CC,DD],[Green',Red']),
take 10 (enumFrom 'a')
take 10 (enumFrom 23)
     data XXX = AA|BB|CC|DD deriving (Enum, Show)
enumFrom BB
     data Color'  = Blue' | Green' | Read' deriving (Show, Read, Eq, Enum)
enumFrom Green'

------------- function application $ -------------
(80,80,[7.0,30.0,9.0,1.7320508075688772]),
#1. sum (filter (> 10) (map (*2) [2..10])) ==  sum $ filter (> 10) $ map (*2) [2..10]
#2. map ($ 3) [(4+), (10*), (^2), sqrt] !!! mapping over list of functions !!!

------------- function composition (.) -------------
(-1,[19,18,17,16,15,14,13,12,11,10],3,8), 
(negate . abs) (-1)
(reverse . take 10 . enumFrom) 10
(abs . snd)(-1,-3)
((2+).(3*).(4-)) 2

------------- function composition or lambda? -------------
([-5,-3,-6,-7,-3,-2,-19,-24],[-5,-3,-6,-7,-3,-2,-19,-24]), 
map (\x -> negate (abs x)) [5,-3,-6,7,-3,2,-19,24], using lambda
map (negate . abs) [5,-3,-6,7,-3,2,-19,24], using function composition

------------- point free style of function composition -------------
(44.5,44.5,44.5), 
sum (replicate 5 (max 6.7 8.9))
sum.replicate 5 . max 6.7) 8.9
sum . replicate 5 . max 6.7 $ 8.9

------------- ceiling --- cos --- tan -------------
(4,3,-3,-0.3333333333333333,-7.654042494670958e-18)
ceiling 3.000001, ceiling 3, ceiling (-3.7)
cos pi/3, tan pi/16

==================== import Data.List ====================

------------- nub -------------
([1,2,3,4,5],"asdf",[1.0,2.0,3.0,4.0,5.0])
nub [1,2,3,4,3,2,1,2,4,3,5]
nub "asdfsadsa"
nub [1,2.0,3,4,3,2,1,2,4,3,5]

------------- intersperse  --- intercalate -------------
("M.O.N.K.E.Y",[1,0,2,0,3,0,4,0,5,0,6],"hey there guys",[1,2,3,0,0,0,4,5,6,0,0,0,7,8,9])
intersperse '.' "MONKEY"
intersperse 0 [1,2,3,4,5,6]
intercalate " " ["hey","there","guys"]
intercalate [0,0,0] [[1,2,3],[4,5,6],[7,8,9]]

------------- transposes  -- looks like matrix operation -------------
([[1,4,7],[2,5,8],[3,6,9]],["htg","ehu","yey","rs","e"],[18,8,6,17])
transpose [[1,2,3],[4,5,6],[7,8,9]]
transpose ["hey","there","guys"]
map sum $ transpose [[0,3,5,9],[10,0,0,9],[8,5,1,-1]]

------------- concat --- concatMap -------------
("foobarcar",[3,4,5,2,3,4,2,1,1],[1,1,1,1,2,2,2,2,3,3,3,3],[1,1,1,1,2,2,2,2,3,3,3,3])
concat ["foo","bar","car"]
concat [[3,4,5],[2,3,4],[2,1,1]]
concatMap (replicate 4) [1..3] == concat ( map (replicate 4) [1..3])

------------- and --- or -------------
(True,False,True,False)
and $ map (>4) [5,6,7,8]
and $ map (==4) [4,4,4,3,4]
or $ map (==4) [2,3,4,5,6,1]
or $ map (>4) [1,2,3]

------------- any --- all -------------
(True,True,False,True)
any (==4) [2,3,5,6,1,4]
any (`elem` ['A'..'Z']) ("HEYGUYSwhatsup" :: [Char])
all (`elem` ['A'..'Z']) ("HEYGUYSwhatsup" :: [Char])
all (>4) [6,9,10]


------------- intermission `elem` elem -------------
(True,True,True)
'o' `elem` ("Zvon" :: [Char])
'o' `elem` ['Z','v','o','n']
elem 'o' ("aSdlkfjo"::[Char])

------------- iterate -------------
([1,2,4,8,16,32,64,128,256,512],["haha","hahahaha","hahahahahaha"])
take 10 $ iterate (*2) 1
take 3 $ iterate (++ "haha") "haha"

------------- splitAt -------------
(("hey","man"),("heyman",""),("","heyman"),"barfoo","barfoo")
splitAt 3 "heyman"
splitAt 100 "heyman"
splitAt (-3) "heyman"
let (a,b) = splitAt 3 "foobar" in b ++ a
do b ++ a where (a,b) = splitAt 3 "foobar"

------------- takeWhile -------------
([6,5,4],"This",53361)
takeWhile (>3) [6,5,4,3,2,1,2,3,4,5,4,3,2,1]
takeWhile (/=' ') "This is a sentence")
sum $ takeWhile (<10000) $ map (^3) [1..]

------------- dropWhile -------------
(" is a sentence",[3,4,5,4,3,2,1])
dropWhile (/=' ') "This is a sentence"
dropWhile (<3) [1,2,2,2,3,4,5,4,3,2,1]

------------- span -------------
(("This"," is a sentence"),"First word:This, the rest: is a sentence")
span (/=' ') "This is a sentence"
let (fw, rest) = span (/=' ') "This is a sentence" in "First word:" ++ fw ++ ", the rest:" ++ rest

------------- break span sort -------------
(([1,2,3],[4,5,6,7]),([1,2,3],[4,5,6,7]),[1,2,2,3,4,5,6,8],"    Tbdeehiillnooorssstw")
break (==4) [1,2,3,4,5,6,7]
span (/=4) [1,2,3,4,5,6,7]
sort [8,5,3,2,1,6,4,2]
sort "This will be sorted soon"

------------- group -------------
([[1,1,1,1],[2,2,2,2],[3,3],[2,2,2],[5],[6],[7]],[(1,4),(2,7),(3,2),(5,1),(6,1),(7,1)])
group [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]
map (\l@(x:xs) -> (x,length l)) . group . sort $ [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]

------------- inits tails -------------
(["","w","w0","w00","w00t"],["w00t","00t","0t","t",""],[("","w00t"),("w","00t"),("w0","0t"),("w00","t"),("w00t","")])
inits "w00t"
tails "w00t"
let w = "w00t" in zip (inits w) (tails w)

------------- isInfixOf --- and example: our implementaion seachig a list for subset -------------
(True,True,False,False)
search "cat" "im a cat burglar"
"cat" `isInfixOf` "im a cat burglar"
"Cat" `isInfixOf` "im a cat burglar"
isInfixOf "cats" "im a cat burglar"

------------- isPrefixOf --- isSuffixOf -------------
(True,False,True,False)
"hey" `isPrefixOf` "hey there!"
"hey" `isPrefixOf` "oh hey there!"
"there!" `isSuffixOf` "oh hey there!"
"there!" `isSuffixOf` "oh hey there"

------------- partition --- elem --- notElem -------------
(("BOBMORGAN","sidneyeddy"),([5,6,7],[1,3,3,2,1,0,3]),("sidneyeddy","BOBMORGAN"))
partition (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"
partition (>3) [1,3,5,6,3,2,1,0,3,7]
partition (`notElem` ['A'..'Z']) "BOBsidneyMORGANeddy"

------------- important diff between partition and span and break -------------
(("BOBMORGAN","sidneyeddy"),("BOB","sidneyMORGANeddy"),("","BOBsidneyMORGANeddy"))
partition (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"
span (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"
break (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"

------------- find   (find :: (a -> Bool) -> [a] -> Maybe a) -------------
(Just 5,Nothing)
find (>4) [1,2,3,4,5,6]
find (>9) [1,2,3,4,5,6]

------------- unsafe and safe implementations of stock1 function -------------
((1001.4,2008,9,4),Just (1001.4,2008,9,4))
stock1  = [(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),(998.3,2008,9,5)]
head (dropWhile (\(val,y,m,d) -> val < 1000) stock1) -- unsafe
find (\(val,y,m,d) -> val > 1000) stock1  -- safe

------------- elemIndex --- elemIndices -------------
(Just 3,Nothing,[5,9,13])
elemIndex 4 [1,2,3,4,5,6]
10 `elemIndex` [1,2,3,4,5,6]
 ' ' `elemIndices` "Where are the spaces?"

------------- findIndex --- findIndices -------------
(Just 5,Nothing,[0,6,10,14])
findIndex (==4) [5,3,2,1,6,4]
findIndex (==7) [5,3,2,1,6,4] 
findIndices (`elem` ['A'..'Z']) "Where Are The Caps?"

------------- zipWith3,4,5,6,7 --- zip3,4,5,6,7 -------------
([(2,2,5,2),(3,2,5,2),(3,2,3,2)],[7,9,8])
zip4 [2,3,3] [2,2,2] [5,5,3] [2,2,2]
zipWith3 (\x y z -> x + y + z) [1,2,3] [4,5,2,2] [2,2,3]

------------- lines --- unlines --- words --- unwords -------------
(["first line","second line","third line"],"first line\nsecond line\nthird line\n",["hey","these","are","the","words","in","this","sentence"],["hey","these","are","the","words","in","this","sentence"],"hey there mate")
lines "first line
second line
third line"
unlines ["first line", "second line", "third line"]
words "hey these are the words in this sentence"
words "hey these           are    the words in this
sentence"
unwords ["hey","there","mate"]

------------- delete -------------
("ey there ghang!","ey tere ghang!","ey tere gang!",())
delete 'h' "hey there ghang!"
delete 'h' . delete 'h' $ "hey there ghang!"
delete 'h' . delete 'h' . delete 'h' $ "hey there ghang!"


------------- \\ -------------
([1,3,4,6,7,8,10],"Im a  baby",[1,3,4,6,7,8,10])
[1..10] \\ [2,5,9]
"Im a big baby" \\ "big"
delete 2 . delete 5 . delete 9 $ [1..10] == [1..10] \\ [2,5,9]

------------- union --- intersect -------------
("hey manwt'sup",[1,2,3,4,5,6,7,8,9,10],[5,6,7])
"hey man" `union` "man what's up"
[1..7] `union` [5..10]
[1..7] `intersect` [5..10]

------------- insert -------------
([3,4,5,1,2,8,2],[1,3,4,4,4,1],[1,2,3,4,5,6,7],"abcdefghijklmnopqrstuvwxyz",[1,2,3,4,3,2,1])
insert 4 [3,5,1,2,8,2]
insert 4 [1,3,4,4,1]
insert 'g' $ ['a'..'f'] ++ ['h'..'z']
insert 3 [1,2,4,3,2,1]

------------- genericLength genericTake genericDrop genericSplitAt genericIndex genericReplicate
nubBy deleteBy unionBy intersectBy groupBy AND 'on' -------------
(3.5,[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]],[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]])
let xs = [1..6] in sum xs / genericLength xs
groupBy (\x y -> (x > 0) == (y > 0)) value
groupBy ((==) `on` (> 0)) value

------------- sortBy AND 'on' -------------
[[],[2],[2,2],[1,2,3],[3,5,4,3],[5,4,5,4,4]]
sortBy (compare `on` length) [[5,4,5,4,4],[1,2,3],[3,5,4,3],[],[2],[2,2]]

==================== import Data.Char ====================
 All these predicates have a type signature of "Char -> Bool"

isControl checks whether a character is a control character.
isSpace checks whether a character is a white-space characters. That includes spaces, tab characters, newlines, etc.
isLower checks whether a character is lower-cased.
isUpper checks whether a character is upper-cased.
isAlpha checks whether a character is a letter.
isAlphaNum checks whether a character is a letter or a number.
isPrint checks whether a character is printable. Control characters, for instance, are not printable.
isDigit checks whether a character is a digit.
isOctDigit checks whether a character is an octal digit.
isHexDigit checks whether a character is a hex digit.
isLetter checks whether a character is a letter.
isMark checks for Unicode mark characters. Those are characters that combine with preceding letters
      to form latters with accents. Use this if you are French.
isNumber checks whether a character is numeric.
isPunctuation checks whether a character is punctuation.
isSymbol checks whether a character is a fancy mathematical or currency symbol.
isSeparator checks for Unicode spaces and separators.
isAscii checks whether a character falls into the first 128 characters of the Unicode character set.
isLatin1 checks whether a character falls into the first 256 characters of Unicode.
isAsciiUpper checks whether a character is ASCII and upper-case.
isAsciiLower checks whether a character is ASCII and lower-case.

------------- isAlphaNum --- isSpace -------------
(True,False,["hey","guys","its","me"],["hey"," ","guys"," ","its"," ","me"],["hey","guys","its","me"])
all isAlphaNum ("bobby283" :: [Char])
all isAlphaNum ("eddy the fish!" :: String)
words "hey guys its me"
groupBy ((==) `on` isSpace) "hey guys its me"
filter (not . any isSpace) . groupBy ((==) `on` isSpace) $ "hey guys its me"

------------- generalCategory -------------
(True,UppercaseLetter,OtherPunctuation,DecimalNumber,LowercaseLetter)
someChar1 = ' '
generalCategory someChar1 == Space
generalCategory 'A'
generalCategory '.'
generalCategory '9'
generalCategory 'b'

------------- toUpper --- toLower --- toTitle --- digitToInt --- intToDigit -------------
([3,4,5,3,8,12,15],[15,15,8,5,10,11],'f','5')
map digitToInt "34538"
map digitToInt "FF85AB"
intToDigit 15
intToDigit 5

------------- toUpper --- U.toUpper -- toLower -------------
('A','5','\923','\1041','\120121','\120121')
toUpper 'a'
toUpper '5'
toUpper 'λ'
U.toUpper 'б'
toLower '𝔹'
toUpper '𝔹'

------------- ord --- chr -------------
(97,955,1073,21704,120121,'a','\953','\1041','Z','\120120')
ord 'a', ord 'λ', ord 'б', ord '哈' ord '𝔹'
chr 97, chr 953, chr 1041, chr 90, chr 120120

------------- encode' --- decode --- example -------------
("Rfww~%Hmwnxyrfx&%Mt%mt%mt&","Im a little teapot")
encode 5 "Marry Christmas! Ho ho ho!"
decode 3 "Lp#d#olwwoh#whdsrw"
"encode' shift msg =  map (chr . (+ shift) . ord) msg"
"decode shift msg = encode (negate shift) msg"

==================== import Data.Map ====================

------------- custom 'findKey' --- Map.fromList -------------
(Just "853-2492",Nothing,fromList [("betty","555-2938"),("bonnie","452-2928"),("lucille","205-2928")],fromList [(1,2),(3,2),(5,5)])
findKey "penny" phoneBook
findKey "wilma" phoneBook
Map.fromList [("betty","555-2938"),("bonnie","452-2928"),("lucille","205-2928")]Map.fromList [(1,2),(3,4),(3,2),(5,5)]findKey' key = foldr (\(k,v) acc -> if key == k then Just v else acc) Nothing

------------- Map.empty --- Map.insert --- Map.null -------------
((),fromList [(3,100)],fromList [(3,100),(4,200),(5,600)],fromList [(3,100),(4,200),(5,600)],True,False)
Map.empty
Map.insert 3 100 Map.empty
Map.insert 5 600 (Map.insert 4 200 ( Map.insert 3 100  Map.empty))nMap.insert 5 600 . Map.insert 4 200 . Map.insert 3 100 $ Map.empty
Map.null Map.empty  -- checks if map is empty?nMap.null $ Map.fromList [(2,3),(5,5)] - check if map is empty?

------------- Map.size --- Map.singleton --- Map.member -------------
(0,5,fromList [(3,9)],fromList [(3,9),(5,9)],True,False)
Map.size Map.empty
Map.size $ Map.fromList [(2,4),(3,3),(4,2),(5,4),(6,4)]
Map.singleton 3 9
Map.insert 5 9 $ Map.singleton 3 9
Map.member 3 $ Map.fromList [(3,6),(4,3),(6,9)]
Map.member 3 $ Map.fromList [(2,5),(4,5)

------------- Map.map --- Map.filter --- Map.toList -------------
(fromList [(1,100),(2,400),(3,900)],fromList [(2,'A'),(4,'B')],[(4,3),(9,2)])
Map.map (*100) $ Map.fromList [(1,1),(2,4),(3,9)]
Map.filter isUpper $ Map.fromList [(1,'a'),(2,'A'),(3,'b'),(4,'B')]
Map.toList . Map.insert 9 2 $ Map.singleton 4 3




------------- Map.lookup -------------
(Just "827-9162, 943-2929, 493-2928",Just "939-8282",Just ["827-9162","943-2929","493-2928"])
Map.lookup "patsy" $ phoneBookToMap phoneBook'
Map.lookup "wendy" $ phoneBookToMap phoneBook'
Map.lookup "patsy" $ phoneBookToMap' phoneBook'




------------- Map.fromListWith --- Map.insertWith -------------
(fromList [(2,100),(3,29),(4,22)],fromList [(2,108),(3,62),(4,37)],fromList [(3,104),(5,103),(6,339)])
Map.fromListWith max [(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)]
Map.fromListWith (+) [(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)]nMap.insertWith (+) 3 100 $ Map.fromList [(3,4),(5,103),(6,339)]

==================== import Data.Set ======================
text1 = "I just had an anime dream. Anime... Reality... Are they so different?"
text2 = "The old man left his garbage can out and now his trash is all over my lawn!"

------------- fromList --- intersection --- difference --- union -------------
(fromList " .?AIRadefhijlmnorstuy",fromList " !Tabcdefghilmnorstuvwy",fromList " adefhilmnorstuy",fromList ".?AIRj",fromList "!Tbcgvw",fromList " !.?AIRTabcdefghijlmnorstuvwy")
(Set.fromList text1
(Set.fromList text2
Set.intersection rsDtSt1 rsDtSt2Set.difference rsDtSt1 rsDtSt2
Set.difference rsDtSt2 rsDtSt1
Set.union rsDtSt1 rsDtSt2
text1="I just had an anime dream. Anime... Reality... Are they so different?"
text2="The old man left his garbage can out and now his trash is all over my lawn!"

------------- null --- size --- member --- empty --- singleton --- insert --- delete -------------
(True,False,fromList [9],3,fromList [1,3,4,8,9],fromList [5,6,7,8,9,10],fromList [3,5])
Set.null Set.empty
Set.null $ Set.fromList [3,4,5,5,4,3]
Set.singleton 9
Set.size $ Set.fromList [3,4,5,3,4,5]
Set.insert 4 $ Set.fromList [9,3,8,1]
Set.insert 8 $ Set.fromList [5..10]
Set.delete 4 $ Set.fromList [3,4,5,4,3,4,5]

------------- isSubsetOf --- isProperSubsetOf -------------
(True,True,False,False)
Set.fromList [2,3,4] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]
Set.fromList [1,2,3,4,5] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]
Set.fromList [1,2,3,4,5] `Set.isProperSubsetOf` Set.fromList [1,2,3,4,5]
Set.fromList [2,3,4,8] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]

------------- toList --- custom 'setNub' -------------
(" ACEHIKLNRSTWY","HEY WATSCRKLIN")
setNub "HEY WHATS CRACKALACKIN"
nub "HEY WHATS CRACKALACKIN"n  setNub xs = Set.toList $ Set.fromList xs

==================== Making your own modules ==============
see file Geometry.hs -- Version #1
see Directory Geometry and files: Cube.hs, Sphere.hs, Cuboid.hs -- Version #2

------------- modules Geom and Sphere, Cube, Cuboid -------------
(4188.7905,600.0,230.826,4188.7905,600.0,230.826)
Geom.sphereVolume 10
Geom.cubeArea 10
Geom.cuboidVolume 5.1 6.2 7.3
Sphere.volume 10
Cube.area 10
Cuboid.volume 5.1 6.2 7.3

=========== Making your own types and Typeclasses ===========

------------- data Person -------------
(Person {firstName = "Neo", lastName = "Anderson", age = 40, height = 184.0, phoneNumber = "555-555", flavor = "butter-scotch"},Person {firstName = "Trinity", lastName = "Unknown", age = 40, height = 172.0, phoneNumber = "555-666", flavor = "vanilla"},Person {firstName = "Morfeus", lastName = "Unknown0", age = 55, height = 182.0, phoneNumber = "555-000", flavor = "chocolate"},Person {firstName = "Neo", lastName = "Anderson", age = 40, height = 184.0, phoneNumber = "555-555", flavor = "vanilla"},False,False,True)
morf1 == neo1
neo1 > trin1
neo2 > neo1

------------- data Car -------------
(Car {company = "lexus", model = "RX350", year = 2014},Car {company = "ford", model = "Mustang", year = 1967},True,"This lexus RX350 was made in 2014","This ford Mustang was made in 1967")
c1 = Car "lexus"  "RX350"  2014
rsMyDt18 = Car {company = "ford", model = "Mustang", year = 1967}
rsMyDt18 < c1
tellCar c1
tellCar rsMyDt18

------------- data Vector (3D Vector) -------------
(Vector 12 7 16,Vector 12 9 19,Vector 30 90 70,74.0,Vector 148 666 222)
Vector 3 5 8 `vplus` Vector 9 2 8
Vector 3 5 8 `vplus` Vector 9 2 8 `vplus` Vector 0 2 3
Vector 3 9 7 `vectMult` 10
Vector 4 9 5 `scalarMult` Vector 9.0 2.0 4.0
Vector 2 9 3 `vectMult` (Vector 4 9 5 `scalarMult` Vector 9 2 4)

------------- read 'custom' --- Derived instances -------------
(True,False)(read "Person {firstName ="Neo", lastName ="Anderson", age = 40, height = 184, phoneNumber = "555-555", flavor = "butter-scotch" }" :: Person) == neo1
(read "Person {firstName ="Michael", lastName ="Diamond", age = 43, height = 178, phoneNumber = "555-999", flavor = "vanilla" }" :: Person) > neo1

------------- read Maybe --- Derived instances -------------
(Just 80,Just 't',Nothing,Nothing)
read "Just 80" :: Maybe Int
read  "Just 't'" :: Maybe Char
read "Nothing" :: Maybe Int
read  "Nothing" :: Maybe Char

------------- compare Bool --- Maybe -------------
(GT,True,True,False,GT,True)
True `compare` False
True > False
Nothing < Just 100
Nothing > Just (-49999)
Just 3 `compare` Just 2
Just 100 > Just 50

------------- Data Day --- deriving (Eq, Ord, Show, Read, Bounded, Enum) -------------
("Wednesday",Saturday,False,LT,Monday,Tuesday,Friday,[Thursday,Friday,Saturday,Sunday])
show Wednesday
read "Saturday" :: Day
Saturday == Sunday
Monday `compare` Wednesday
minBound :: Day
succ Monday
[Thursday .. Sunday]
[minBound .. maxBound] :: [Day]
N.B. succ Sunday *** Exception: succ{Day}: tried to take `succ' of last tag in enumeration
N.B. pred Monday *** Exception: pred{Day}: tried to take `pred' of first tag in enumeration

------------- data Either a b = Left a | Right b -------------
(Right 20,Right 'a',Right 3.423)
Right 20
Right 'a' :: Either a Char
Right 3.423 :: Either () Double

------------- safe head implementation, using Either -------------
(Right 1,Right 'T')
eitherHead [1,2,3,4,5]
eitherHead "This is a test string"
eitherHead :: [a] -> Either String a
eitherHead [] = Left "Empty Head"
eitherHead (x:xs) = Right x

------------- lockers example, using Either -------------
(Right "JAH3I",Left "Locker 100 is already taken!",Left "Locker number 102 doesn't exist!",Left "Locker 110 is already taken!",Right "QOTSA")
lockerLookup 101 lockers
lockerLookup 100 lockers
lockerLookup 102 locker
lockerLookup 110 lockers
lockerLookup 105 lockers

------------- recursive data structure -------------
([3,4,5,6],[3,4,5,6],[3,4,5,6])
(3:(4:(5:6:[]))
3:4:5:6:[]
[3,4,5,6]

------------- binary tree search - data Tree -------------
(Node (-5) EmptyTree (Node 100 (Node 77 (Node 8 (Node 6 (Node (-1) EmptyTree (Node 3 EmptyTree EmptyTree)) EmptyTree) (Node 11 (Node 10 EmptyTree EmptyTree) EmptyTree)) (Node 99 EmptyTree EmptyTree)) EmptyTree),True,False,False,False)
numsTree1 = foldr treeInsert EmptyTree [3,99, (-1), 10, 11, 6, 8, 77, 100, (-5)]n8 `treeElem` numsTree1
1100 `treeElem` numsTree1
1 `treeElem` nnumsTree1)
(-1) `treeElem` numsTree

------------- Class "YesNo" Typeclass Example,  "yesno :: (YesNo a) => a -> Bool" -------------
(False,True,False,True,True,False,False,True,True)
yesno $ length []
yesno ("haha" :: [Char])
yesno ("" :: [Char])
yesno $ Just 0
yesno True
yesno EmptyTree
yesno []
yesno [0,0,0]
yesno (Green :: TrafficLight)

------------- function yesnoIf, Typeclass Example, it mimics if statement -------------
("NO!","YEAH!","YEAH!","YEAH!","NO!")
yesnoIf [] "YEAH!" "NO!"
yesnoIf [2,3,4] "YEAH!" "NO!"
yesnoIf True "YEAH!""NO!"
yesnoIf (Just 500) "YEAH!" "NO!"
yesnoIf Nothing "YEAH!" "NO!"

======================== The Functor typeclass =======================


======================== IO () ===================================

--- putStrLn --- getLine --- putStr --- putChar --- print --- getChar---
--- when --- sequence --- mapM --- forever --- forM ---


-------------- sequence (map print [1,2,3,4,5]) -----------
1
2
3
4
5

-------------- mapM print ["one", "two", "three"] -----------
"one"
"two"
"three"

-------------- mapM_ putChar ['a', 'b', 'c', '\n'] -----------
abc

-------------- forM print ['a', 'b', 'c', '\n'] -----------
Red'
Green'
Blue'

==================== Files and streams ============================

--- getContents --- getChar --- interact --- 
--- openFile --- hContents --- hClose --- FilePath --- IOMode --- IO Handle ---

------------- 
--- openFile --- IOMode::ReadMode --- hGetContents --- hClose --- -------------
"func18main"
handle <- openFile "Girlfriend.txt" ReadModencontents <- hGetContents handle
putStr contents
hClose handle
Hey! Hey! You! You!
I don't like your girlfriend!
No way! No way!
I think you need a new one!
------------- 
--- withFile --- IOMode::ReadMode --- hGetContents --- -------------
Hey! Hey! You! You!
I don't like your girlfriend!
No way! No way!
I think you need a new one!
withFile "Girlfriend.txt" ReadMode (\handle -> doncontents <- hGetContents handle
putStr contents)

------------- readFile -------------
Hey! Hey! You! You!
I don't like your girlfriend!
No way! No way!
I think you need a new one!

------------- writeFile -------------
"GirlfriendCaps.txt"

------------- readFile with caps -------------
HEY! HEY! YOU! YOU!
I DON'T LIKE YOUR GIRLFRIEND!
NO WAY! NO WAY!
I THINK YOU NEED A NEW ONE!Result of reading

------------- appendFile, adding to the file todo.txt -------------
Iron the dishes

------------- withFile, reading the whole fine in chuncks by 2048 -------------
Copyright Author name here (c) 2020

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Author name here nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-------------------- LICENSE text ----------------

--- (import System.Directory) --- openTempFile --- removeFile --- renameFile ---

--- (import System.Environment) --- getArgs --- getProgName ---

--- (todo.hs), getArgs, lookup, appendFile, readFile, zipWith, line, unlines,
--- (todo.hs), openFile, openTempFile, hGetContents, read, hClose, removeFile, renameFile


======================= Randomness ============================


------------- random -------------
((-3633736515773289454,693699796 2103410263),(6642787099209953655,75809027 2103410263),(-98,1485632275 40692),('\480286',1485632275 40692),(0.921957268683227,587416689 2103410263),(False,1485632275 40692))
random (mkStdGen 100) :: (Int, StdGen)
andom (mkStdGen 949494) :: (Int, StdGen)
random (mkStdGen 949488) :: (Int8, StdGen)
random (mkStdGen 949488) :: (Char, StdGen)
random (mkStdGen 949488) :: (Double, StdGen)
random (mkStdGen 949488) :: (Bool, StdGen)

------------- threeCoins using random -------------
((True,True,True),(True,False,True),(True,False,True),(True,True,True),(True,False,True),(True,True,True))
threeCoins (mkStdGen 0)
threeCoins (mkStdGen 1)
threeCoins (mkStdGen (-22))
threeCoins (mkStdGen 944)
threeCoins (mkStdGen 22)
threeCoins (mkStdGen 944)

------------- randoms and custom randoms' - the same implementaion -------------
([5260538044923710387,4361398698747678847,-8221315287270277529,7278185606566790575,1652507602255180489],[True,True,True,True,False],[0.26201087,0.1271351,0.31857032,0.1921351,0.31495118])
take 5 $ randoms (mkStdGen 11) :: [Int]
take 5 $ randoms (mkStdGen 11) :: [Bool]
 take 5 $ randoms' (mkStdGen 11) :: [Float]

------------- finiteRandoms and modified finiteRandoms' -------------
(([-1825951240769410156,2457918671109663585,-1305741337097690530,8345272281176594228],842222601 1924298326),([-2774747785423059091,-5364865979222864935,5005192715100199576,-2238708107678760508],587898465 1924298326),([-1825951240769410156,2457918671109663585,-1305741337097690530,8345272281176594228],842222601 1924298326),([-2774747785423059091,-5364865979222864935,5005192715100199576,-2238708107678760508],587898465 1924298326))
finiteRandoms 4 (mkStdGen 359353) :: ([Int], StdGen)

finiteRandoms 4 (mkStdGen 10) :: ([Int], StdGen)
finiteRandoms' 4 (mkStdGen 359353)
finiteRandoms' 4 (mkStdGen 10)

------------- randomR and randomRs -------------
((6,1494289578 40692),(3,1250031057 40692),"xnuhlfwywq")
randomR (1::Int16, 6::Int16) (mkStdGen 359353)
randomR (1::Int16, 6::Int16) (mkStdGen 35935335)
take 10 $ randomRs ('a','z') (mkStdGen 3) :: [Char]

------------- non repetivive results of 2 sets, every time new, using 2 generators -------------
nciaqqpibvfwujvsbnao
zgyqplvsgdipkhnyebpw
func28main, it also using its own IO output

------------- non repetivive results of 2 sets, every time new, using 2 generators -------------
bwcikzmrsxghybpgkoha
nrjntywupeqayvoyepse
func28main, it also using its own IO output

--- getStdGen --- setStdGen --- next --- newStdGen ---

------------- func30main -------------
(1613914965,1569841666 2103410263)
(1613914965,1569841666 2103410263)
1613914965
(1613914965,1569841666 2103410263)
(2025617684,1750205574 1872071452)
(2025617684,1750205574 1872071452)
(1097333531,1750245588 652912057)
...

================================== Bytestrings ===============================


------------- pack --- fromChunks -------------
("can","bcdefghijklmnopqrstuvwx","\NUL\SOH\STX\ETX\EOT\ENQ\ACK\a\b\t\n\v\f\r\SO\SI\DLE\DC1\DC2\DC3\DC4\NAK\SYN\ETB\CAN\EM\SUB\ESC\FS\GS\RS\US !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\DEL\128\129\130\131\132\133\134\135\136\137\138\139\140\141\142\143\144\145\146\147\148\149\150\151\152\153\154\155\156\157\158\159\160\161\162\163\164\165\166\167\168\169\170\171\172\173\174\175\176\177\178\179\180\181\182\183\184\185\186\187\188\189\190\191\192\193\194\195\196\197\198\199\200\201\202\203\204\205\206\207\208\209\210\211\212\213\214\215\216\217\218\219\220\221\222\223\224\225\226\227\228\229\230\231\232\233\234\235\236\237\238\239\240\241\242\243\244\245\246\247\248\249\250\251\252\253\254\255","()*+,-./0"),  
(B.pack [99,97,110]
B.pack [98..120]
B.fromChunks [S.pack [40,41,42],
B.pack [0..692] S.pack [43,44,45], S.pack [46,47,48]]

-------- copyFile, using bytestring functions B.readFile and B.writeFile -------

================================== Exceptions ===============================


--- import System.IO.Error --- import Control.Exception --- import Control.Exception.Base ---
--- "stack install extensible-exceptions" --- "- extensible-exceptions >= 0.1.1.0"

--- doesFileExist ---
The file: "todo.txt" has 126 lines!
The file: "todoNotHere.txt" doesn't exist!

--- ArithException --- DivideByZero 
"hi"
Divide by Zero!

============= Avoiding exceptions using Maybe (Option type) or Either =========

------------- avoiding head "[]", using headSafe, based on Maybe, headSafe :: [a] -> Maybe a -------------
("Just 1","Nothing")
headSafe [1, 2, 3, 4, 5]
headSafe []

------------- --- converting data, received in Maybe Int, using --- fromMaybe --- -------------
(Just 1,Nothing,1,0)
read "Just 1" :: Maybe Int
read "Nothing" :: Maybe Int
fromMaybe 0 (read "Just 8" :: Maybe Int)
fromMaybe 0 (read "Nothing" :: Maybe Int)

------------- avoiding div 0, divSafe, based on Maybe, divSafe :: Integral a => a -> a -> Maybe a -------------
(Just 5,Nothing,Just 0)
divSafe 100 20
divSafe 100 0
divSafe 0 100

------------- using readMaybe "import Text.Read(readMaybe)" -------------
(Just (Just 200),Just Nothing,Nothing,Just [1,2,3,4,5],Nothing,Just [100.0,200.0,300.0],Nothing)
readMaybe "Just 200" :: Maybe (Maybe Int)
readMaybe "Nothing" :: Maybe (Maybe Int)
readMaybe "Notasdasdas" :: Maybe (Maybe Int)
readMaybe "[1, 2, 3, 4, 5]" :: Maybe [Int]
readMaybe "garbage" :: Maybe [Int]
readMaybe "[100.0, 200.0, 300.0]" :: Maybe [Double]
readMaybe ", 200.0, 300.0]" :: Maybe [Double]

------------- more readMaybe -------------
(Just 1.45e10,Just 2.0,Nothing,Just 200)
readMaybe "1.450e10" :: Maybe Float
readMaybe "2.00" :: Maybe Float
readMaybe "a200" :: Maybe Int
readMaybe "200" :: Maybe Int

--- validateAge, using Either for data validation age with strings ---
mapM_ print $ map validateAge ["safsdf", "-100", "garbage", "400", "7", "15", "20", "25", ""]
Left "Invalid input. Not a number"
Left "Error: Invalid age. It must be greater than zero."
Left "Invalid input. Not a number"
Left "Error: Invalid age. Impossible age."
Left "Error: Below legal age to sign the contract."
Left "Error: Below legal age to sign the contract."
Right 20
Right 25
Left "Invalid input. Not a number"

--- validateAge2, using Either and also using data AgeError for data validation age with strings ---
mapM_ print $ map validateAge2 ["safsdf", "-100", "garbage", "400", "7", "15", "20", "25", ""]
Left AgeInvalidInput
Left AgeImpossible
Left AgeInvalidInput
Left AgeImpossible
Left AgeBelowLegalAge
Left AgeBelowLegalAge
Right 20
Right 25
Left AgeInvalidInput

--- validateAge3, using Either and also using data AgeError, human readable output with srings ---
mapM_ print $ validateAge3 ["safsdf", "-100", "garbage", "400", "7", "15", "20", "25", ""]
Left "Invalid input. Not a number"
Left "Error: Invalid age. Impossible age."
Left "Invalid input. Not a number"
Left "Error: Invalid age. Impossible age."
Left "Error: Below legal age to sign the contract."
Left "Error: Below legal age to sign the contract."
Right 20
Right 25
Left "Invalid input. Not a number"

------------- using module ValidateUser as VU in file ValidateUser.hs to validate name and age -------------
(Right ("John",20),Left UserNameError,Left (UserAgeError AgeImpossible))
VU.validateUser "John" "20"
VU.validateUser "" "-100"
VU.validateUser "John" "2000"

--- ioExceptionTester $ throw (userError "I am raising an Error") ---
Exception message = user error (I am raising an Error from ioExceptionTester)
Error: User error

--- some non-caught non-io Exceptions ---
--- (read "10asd0" :: Int) --- DivideByZero --- ioExceptionTester (error "Some error") --- 
--- ioExceptionTester $ throw Underflow --- 

--- Async Exception - User interrupt ---
--- ioExceptionTester (putStrLn "Enter something" >> getLine >>= putStrLn)

------------- Catching Exceptions using the function catches,
it needs {-# LANGUAGE ScopedTypeVariables #-} -------------
Error I got an Arithmetic exception.
testCatches (throw DivideByZero)

Error I got an Arithmetic exception.
testCatches (throw Overflow )

IO Exception - I don't know how to handle this exception
testCatches (readFile "/etc/issue" >>= putStrLn)

--- using several handlers --- reading file twice in different handlers cathing exceptions
44: The file has 126 lines!
45: The file has 126 lines!
Tried to read twice 2 files, exceptions handled in 2 different handlers #44 and #45
"darwin"
"x86_64"
"ghc"
Version {versionBranch = [8,8], versionTags = []}
funcSI1main


------------- funcExcTstmain, Exception Tester -------------
I caught an exception.
Message =  divide by zero
Type of exception = ArithException
"---"
I caught an exception.
Message =  Fatal kernel error
CallStack (from HasCallStack):
  error, called at src/Lib4.hs:5886:22 in L4-0.1.0.0-ODindGD4tBBZ5kXfwso9K:Lib4
Type of exception = ErrorCall
"---"
I caught an exception.
Message =  /etc/shadow: openFile: does not exist (No such file or directory)
Type of exception = IOException
"---"
I caught an exception.
Message =  Prelude.head: empty list
Type of exception = ErrorCall
"---"
1
"---"
Exception Tester


Right True
Right 3.423
Right 3.423
0
6

----------- Lib5 -------------------------
=================== Functionaly Solving Problems ====================================

------------- Reverse Polish Notation -------------
(-4,4037,5,-3947)
solveRPN "10 4 3 + 2 * -"
solveRPN' "90 34 12 33 55 66 + * - + -"
solveRPN' "2 3 +"
solveRPN "90 34 12 33 55 66 + * - +"

------------- better RBN calculator solveRPNB -------------
(0.9932518,10.0,12.5,100.0,6.575903)
solveRPNB "2.7 ln"
solveRPNB "10 10 10 10 sum 4 /"
solveRPNB "10 10 10 10 10 sum 4 /"
solveRPNB "10 2 ^"
solveRPNB "43.2425 0.5 ^" 

=========================== Heathrow to London ==================
=========================== Checking OS ==================
"darwin"
"x86_64"
"ghc"
Version {versionBranch = [8,8], versionTags = []}
---------- IO FilePath & System.Directory ---------

------------- getFullPath -------------
"/Users/admin1/Haskell/"
getFullPath "~Haskell/"

------------- getHomeDirectory, is an action, NOT A FUNTION -------------
"/Users/admin1"


------------- getUserDocumentsDirectory -------------
"/Users/admin1"

=========================== Simple Examples ==================
https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/Simple%20examples#simple-application

--- getCurrentTime >>= print ---
2020-10-09 16:09:15.234203 UTC

------------- 
--- Yesod version --- -------------
1.6.18


getCurrentDirectory >>= print
getHomeDirectory >>= print
getUserDocumentsDirectory >>= print
"/Users/admin1/Haskell/PROJECTS/L4"
"/Users/admin1"
"/Users/admin1"

 ----------------- getEnvironment  -------------------
[("Apple_PubSub_Socket_Render","/private/tmp/com.apple.launchd.owtQXOtiUR/Render"),("CLICOLOR","1"),("COLORTERM","truecolor"),("COMMAND_MODE","unix2003"),("GHC_ENVIRONMENT","-"),("GHC_PACKAGE_PATH","/Users/admin1/Haskell/PROJECTS/L4/.stack-work/install/x86_64-osx/82bf768a522c04d0dbd67debf60484f294ea19e3104507f2bd835c36989c88f6/8.8.3/pkgdb:/Users/admin1/.stack/snapshots/x86_64-osx/82bf768a522c04d0dbd67debf60484f294ea19e3104507f2bd835c36989c88f6/8.8.3/pkgdb:/Users/admin1/.stack/programs/x86_64-osx/ghc-8.8.3/lib/ghc-8.8.3/package.conf.d"),("GIT_ASKPASS","/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh"),("HASKELL_DIST_DIR","/Users/admin1/Haskell/PROJECTS/L4/.stack-work/dist/x86_64-osx/Cabal-3.0.1.0"),("HASKELL_PACKAGE_SANDBOX","/Users/admin1/.stack/snapshots/x86_64-osx/82bf768a522c04d0dbd67debf60484f294ea19e3104507f2bd835c36989c88f6/8.8.3/pkgdb"),("HASKELL_PACKAGE_SANDBOXES","/Users/admin1/Haskell/PROJECTS/L4/.stack-work/install/x86_64-osx/82bf768a522c04d0dbd67debf60484f294ea19e3104507f2bd835c36989c88f6/8.8.3/pkgdb:/Users/admin1/.stack/snapshots/x86_64-osx/82bf768a522c04d0dbd67debf60484f294ea19e3104507f2bd835c36989c88f6/8.8.3/pkgdb:"),("HOME","/Users/admin1"),("LANG","en_US.UTF-8"),("LOGNAME","admin1"),("LSCOLORS","GxFxCxDxBxegedabagaced"),("ORIGINAL_XDG_CURRENT_DESKTOP","undefined"),("PATH","/Users/admin1/Haskell/PROJECTS/L4/.stack-work/install/x86_64-osx/82bf768a522c04d0dbd67debf60484f294ea19e3104507f2bd835c36989c88f6/8.8.3/bin:/Users/admin1/.stack/snapshots/x86_64-osx/82bf768a522c04d0dbd67debf60484f294ea19e3104507f2bd835c36989c88f6/8.8.3/bin:/Users/admin1/.stack/compiler-tools/x86_64-osx/ghc-8.8.3/bin:/Users/admin1/.stack/programs/x86_64-osx/ghc-8.8.3/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"),("PS1","________________________________________________________________________________\\n| \\w @ \\h (\\u) \\n| => "),("PS2","| => "),("PWD","/Users/admin1/Haskell/PROJECTS/L4"),("SHELL","/bin/bash"),("SHLVL","2"),("SSH_AUTH_SOCK","/private/tmp/com.apple.launchd.ASuISlZWWa/Listeners"),("STACK_EXE","/usr/local/bin/stack"),("TERM","xterm-256color"),("TERM_PROGRAM","vscode"),("TERM_PROGRAM_VERSION","1.49.3"),("TMPDIR","/var/folders/cb/74hrnm4d3fq9b78fqnnrl_yh0000gp/T/"),("USER","admin1"),("VSCODE_GIT_ASKPASS_MAIN","/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js"),("VSCODE_GIT_ASKPASS_NODE","/Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper (Renderer).app/Contents/MacOS/Code Helper (Renderer)"),("VSCODE_GIT_IPC_HANDLE","/var/folders/cb/74hrnm4d3fq9b78fqnnrl_yh0000gp/T/vscode-git-4a2d275d27.sock"),("XPC_FLAGS","0x0"),("XPC_SERVICE_NAME","0"),("_","/usr/local/bin/stack"),("__CF_USER_TEXT_ENCODING","0x1F6:0x0:0x0")]


 ----------------- Happstack.Server  -------------------

------------- using "curl http://localhost" -------------
I caught an exception.
Message =  callCommand: 
curl http://localhost (exit 52): failed
Type of exception = IOException


 ----------------- Lists, list = [1,2,3,4,5]  -------------------
[1,2,3,4,5]
1
[2,3,4,5]
5
[1,2,3,4]
4
True
5
False
[5,4,3,2,1]
[1,2]
[3,4,5]
1
5
15
120
[1,2,3,4,5,6,7,8,9,10]
"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
[2,4,6,8,10,12,14,16,18,20]
[1,2,3,4,1,2,3,4,1,2]
[2,3,4,5,6]
[4,5]
False
True
15
15
15
15
[15,14,12,9,5,0]
[15,14,12,9,5]
[0,1,3,6,10,15]
[1,3,6,10,15]
[0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0]
[4,5]
"abc"
[(1,'a'),(2,'b'),(3,'c')]
([1,2,3],"abc")
[5,7,9]
[(1,'a'),(1,'b'),(1,'c'),(1,'d'),(1,'e'),(2,'a'),(2,'b'),(2,'c'),(2,'d'),(2,'e'),(3,'a'),(3,'b'),(3,'c'),(3,'d'),(3,'e'),(4,'a'),(4,'b'),(4,'c'),(4,'d'),(4,'e'),(5,'a'),(5,'b'),(5,'c'),(5,'d'),(5,'e')]
["Hello","world"]
"Hello world"

 ------------- Tuples, tuple = (1, 2), tuple3 = (1, 2, 3) ----------
(1,2)
1
2
(1,2,3)
1
2
3

 -------------- Data.List  -------------------
"E.r.i.k"
"abc efg x"
["ae","bf","cg"]
["","a","b","ab","c","ac","bc","abc"]
["abc","bac","cba","bca","cab","acb"]
500000500000
500000500000
"abcefg"
True
False
[1,2,3,4,5,6,7,8,9,10]
"xxxxxxxxxx"
("abc","defgh")
[1,2]
([1,2],[3,4,5,6,7,8,9,10])
([1,2,3],[4,5,6,7,8,9,10])
Just "cdefg"
True
True
Just 3
Just 3
([3,4,5,6,7,8,9,10],[1,2])
[1,3,2,4,6]
[1,2,3,4,5,6,7,8,9,10]
Just 1
[1,4]
Just 0
[0,1,4]

 -------------- Data.Char  -------------------
True
True
'A'
'e'
2
'9'
'c'
65
'='

 -------------- Data.Map  -------------------
fromList [(1234,"Erik"),(5678,"Patrik")]
Just "Erik"
fromList []
fromList [(3,5)]
fromList [(1,"abc")]
False
2
[(1234,"Erik"),(5678,"Patrik")]
[1234,5678]
["Erik","Patrik"]

 -------------- Data.Set  -------------------
fromList " aeijklrs"
False
9
True

 -------------- Data.Array  -------------------
array (1,3) [(1,"a"),(2,"b"),(3,"c")]
"b"
(1,3)
[1,2,3]
["a","b","c"]
[(1,"a"),(2,"b"),(3,"c")]

 -------------- Data.Complex  -------------------
3.0 :+ 4.0
3.0
4.0
(5.0,0.9272952180016122)
5.0
0.9272952180016122
3.0 :+ (-4.0)

 -------------- Data.HashSet  -------------------
fromList "abc"
False
3
True
False
fromList "abcd"
fromList "ac"
fromList "ABC"
fromList "bc"

 -------------- Data.HashMap  -------------------
fromList [(1,'a'),(2,'b'),(3,'c')]
[1,2,3]
"abc"
False
3
True
False
Just 'a'
Nothing
"this line does not compile: 'print $ hashMap ! 1', looks like it is related to quilified issue"
'N'
fromList [(1,'a'),(2,'b'),(3,'c'),(4,'d')]
fromList [(1,'a'),(3,'c')]
fromList [(1,'A'),(2,'B'),(3,'C')]
fromList [(2,'b'),(3,'c')]

 -------------- Data.Graph  -------------------
array (1,6) [(1,[3,2]),(2,[4]),(3,[]),(4,[]),(5,[6]),(6,[])]
[1,2,3,4,5,6]
[(1,3),(1,2),(2,4),(5,6)]
[(2,1),(3,1),(4,2),(6,5)]
array (1,6) [(1,2),(2,1),(3,0),(4,0),(5,1),(6,0)]
array (1,6) [(1,0),(2,1),(3,1),(4,1),(5,0),(6,1)]
[5,6,1,2,4,3]
[1,3,2,4]
True
False
[Node {rootLabel = 1, subForest = [Node {rootLabel = 2, subForest = [Node {rootLabel = 4, subForest = []}]},Node {rootLabel = 3, subForest = []}]},Node {rootLabel = 5, subForest = [Node {rootLabel = 6, subForest = []}]}]
[Node {rootLabel = 6, subForest = []},Node {rootLabel = 5, subForest = []},Node {rootLabel = 4, subForest = []},Node {rootLabel = 3, subForest = []},Node {rootLabel = 2, subForest = []},Node {rootLabel = 1, subForest = []}]
[Node {rootLabel = [1,3], subForest = []},Node {rootLabel = [1,2], subForest = [Node {rootLabel = [2,4], subForest = []}]},Node {rootLabel = [5,6], subForest = []}]
[Node {rootLabel = 1, subForest = [Node {rootLabel = 3, subForest = []},Node {rootLabel = 2, subForest = [Node {rootLabel = 4, subForest = []}]}]},Node {rootLabel = 5, subForest = [Node {rootLabel = 6, subForest = []}]}]
[Node {rootLabel = 2, subForest = [Node {rootLabel = 4, subForest = []}]}]

 ----- Unicode Strings (withCP65001, which is UTF-8) ------
λλλ, 2.0 == 2.1
κόσμε
→
☀☁☂☃☄

-------------  JavaScript minification  -------------
"function test(){alert('Hello, world!')}"


-------------  Simple HTTP conduit  -------------
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>WINSOFT</title>
	<link href="style.css" rel="stylesheet" type="text/css" />
</head>

<body>
	<div class="main">
		<div class="header">
			<div class="header_resize">
				<div class="logo">
					<h1><a href="index.htm"><b><span>WIN</span>SOFT</b><small> software components and applications</small></a></h1>
				</div>
				<div class="clr"></div>
			</div>
		</div>
		<div class="hbg">
			<div class="hbg_resize">
				<div class="menu_nav">
					<ul>
						<li class="active"><a href="index.htm">Home</a></li>
						<li><a href="products.htm">Products</a></li>
						<li><a href="services.htm">Services</a></li>
						<li><a href="downloads.htm">Downloads</a></li>
						<li><a href="contact.htm">Contact</a></li>
					</ul>
				</div>
			</div>
		</div>
		<div class="content">
			<div class="content_resize">
				<div class="mainbar">
					<div class="article">
						<h2><span>What's new</span></h2>
						<div class="clr"></div>
						<ul class="ex_menu">
<!--
							<li>August 27, <a href="infclib.htm">NFC Library for iOS 3.1</a> released</li>
-->
							<li>October 9, <a href="fwebview.htm">WebView for FireMonkey 2.6</a> released</li>
							<li>October 9, <a href="webview.htm">WebView 2.4</a> released</li>
							<li>October 9, <a href="fpdfium.htm">PDFium Component Suite for FireMonkey 5.6</a> released</li>
							<li>October 7, <a href="fbarcode.htm">Barcode for FireMonkey 5.7</a> released</li>
							<li>October 6, <a href="barcode.htm">Barcode 5.2</a> released</li>
							<li>October 2, <a href="npdfium.htm">PDFium Component Suite for .NET 4.1</a> released</li>
							<li>September 30, <a href="pdfium.htm">PDFium Component Suite 5.9</a> released</li>
							<li>September 24, <a href="fwebview.htm">WebView for FireMonkey 2.5</a> released</li>
							<li>September 24, <a href="acpusb.htm">ComPort for Android USB 3.9</a> released</li>
							<li>September 17, <a href="fwebview.htm">WebView for FireMonkey 2.4</a> released</li>
							<li>September 17, <a href="webview.htm">WebView 2.3</a> released</li>
							<li>September 16, <a href="frtocr.htm">OCR RT for FireMonkey 1.1</a> released</li>
							<li>September 16, <a href="rtocr.htm">Optical Character Recognition RT 1.1</a> released</li>
							<li>September 12, <a href="aobrml.htm">OBR ML Library for Android 1.0</a> released</li>
							<li>September 8, <a href="jsengine.htm">JSEngine 3.9</a> released</li>
							<li>September 8, <a href="aprinting.htm">Printing Library for Android 2.6</a> released</li>
							<li>September 7, <a href="fwebview.htm">WebView for FireMonkey 2.3</a> released</li>
							<li>September 7, <a href="webview.htm">WebView 2.2</a> released</li>
							<li>September 4, <a href="acpusb.htm">ComPort for Android USB 3.8</a> released</li>
							<li>September 2, <a href="frtocr.htm">OCR RT for FireMonkey 1.0</a> released</li>
							<li>September 1, <a href="rtocr.htm">Optical Character Recognition RT 1.0</a> released</li>
							<li>September 1, <a href="jimport.htm">JavaImport for Android 4.0</a> released</li>
<!--
							<li>August 31, <a href="acamera.htm">Camera for Android 4.1</a> released</li>
							<li>August 28, <a href="highlightjs.htm">Syntax Highlighting 1.1</a> released</li>
							<li>August 28, <a href="abtlib.htm">Bluetooth Library for Android 1.6</a> released</li>
							<li>August 28, <a href="fwebview.htm">WebView for FireMonkey 2.2</a> released</li>
							<li>August 28, <a href="webview.htm">WebView 2.1</a> released</li>
							<li>August 26, <a href="java4delphi.htm">Java4Delphi 1.6</a> released</li>
							<li>August 26, <a href="jbridge.htm">JavaBridge 2.7</a> released</li>
							<li>August 24, <a href="fwebview.htm">WebView for FireMonkey 2.1</a> released</li>
							<li>August 24, <a href="webview.htm">WebView 2.0</a> released</li>
							<li>August 24, <a href="fprotsuite.htm">Communication Protocol Suite for FireMonkey 1.9</a> released</li>
							<li>August 22, <a href="protsuite.htm">Communication Protocol Suite 4.3</a> released</li>
							<li>August 21, <a href="fcomport.htm">ComPort for FireMonkey 2.2</a> released</li>
							<li>August 20, <a href="comport.htm">ComPort 6.4</a> released</li>
							<li>August 19, <a href="https://blogs.embarcadero.com/easy-access-development-using-winsofts-adonis/"><img src="https://www.embarcadero.com/favicon.ico" alt="Icon" class="favicon" />Easy Access Development Using Winsoft’s Adonis</a></li>
							<li>August 18, <a href="https://blogs.embarcadero.com/enterprise-component-pack-2020-details/"><img src="https://www.embarcadero.com/favicon.ico" alt="Icon" class="favicon" />Enterprise Component Pack 2020 Details</a></li>
							<li>August 17, <a href="lcomport.htm">ComPort for Linux 1.3</a> released</li>
							<li>August 13, <a href="abtlib.htm">Bluetooth Library for Android 1.5</a> released</li>
							<li>August 11, <a href="fwebview.htm">WebView for FireMonkey 2.0</a> released</li>
							<li>August 11, <a href="webview.htm">WebView 1.9</a> released</li>
							<li>August 7, <a href="vstream.htm">Video Stream 1.4</a> released</li>
							<li>August 7, <a href="fbarcode.htm">Barcode for FireMonkey 5.6</a> released</li>
							<li>August 6, <a href="barcode.htm">Barcode 5.1</a> released</li>
							<li>August 5, <a href="acpusb.htm">ComPort for Android USB 3.7</a> released</li>
							<li>August 5, <a href="libre.htm">Libre 2.3</a> released</li>
							<li>August 4, <a href="abtlib.htm">Bluetooth Library for Android 1.4</a> released</li>

							<li>July 31, <a href="fwebview.htm">WebView for FireMonkey 1.9</a> released</li>
							<li>July 31, <a href="webview.htm">WebView 1.8</a> released</li>
							<li>July 25, <a href="nocra.htm">OCR.NET for Android 1.6</a> released</li>
							<li>July 25, <a href="focr.htm">Optical Character Recognition for FireMonkey 5.3</a> released</li>
							<li>July 23, <a href="nocr.htm">Optical Character Recognition for .NET 5.9</a> released</li>
							<li>July 23, <a href="ocr.htm">Optical Character Recognition 8.3</a> released</li>
							<li>July 21, <a href="fobr.htm">Optical Barcode Recognition for FireMonkey 3.5</a> released</li>
							<li>July 17, <a href="fwebview.htm">WebView for FireMonkey 1.8</a> released</li>
							<li>July 17, <a href="webview.htm">WebView 1.7</a> released</li>
							<li>July 14, <a href="utils.htm">Utils 1.6</a> released</li>
							<li>July 13, <a href="acamera.htm">Camera for Android 4.0</a> released</li>
							<li>July 13, <a href="apdflibrary.htm">PDF Library for Android 1.5</a> released</li>
							<li>July 12 <a href="fbarcode.htm">Barcode for FireMonkey 5.5</a> released</li>
							<li>July 11, <a href="barcode.htm">Barcode 5.0</a> released</li>
							<li>July 8, <a href="acpusb.htm">ComPort for Android USB 3.6</a> released</li>
							<li>July 7, <a href="aobrlib.htm">OBR Library for Android 5.2</a> released</li>
							<li>July 2, <a href="amediarec.htm">Media Recorder for Android 1.8</a> released</li>
							<li>July 2, <a href="acamera.htm">Camera for Android 3.9</a> released</li>

							<li>June 26, <a href="anfclib.htm">NFC Library for Android 6.4</a> released</li>
							<li>June 24, <a href="acpprolif.htm">ComPort for Android Prolific 3.0</a> released</li>
							<li>June 24, <a href="fwebview.htm">WebView for FireMonkey 1.7</a> released</li>
							<li>June 23, <a href="acpftdi.htm">ComPort for Android FTDI 3.3</a> released</li>
							<li>June 23, <a href="acpft31xd.htm">ComPort for Android FT31xD 1.6</a> released</li>
							<li>June 20, <a href="abtlib.htm">Bluetooth Library for Android 1.3</a> released</li>
							<li>June 20, <a href="ajdbc.htm">JDBC for Android 3.9</a> released</li>
							<li>June 20, <a href="linalg.htm">Linear Algebra 1.6</a> released</li>
							<li>June 20, <a href="dsp.htm">DSP 1.2</a> released</li>
							<li>June 20, <a href="ausblib.htm">USB Library for Android 1.7</a> released</li>
							<li>June 19, <a href="utils.htm">Utils 1.5</a> released</li>
							<li>June 18, <a href="aprinting.htm">Printing Library for Android 2.5</a> released</li>
							<li>June 18, <a href="acpusb.htm">ComPort for Android USB 3.5</a> released</li>
							<li>June 17, <a href="acpusbser.htm">ComPort for Android USB Serial 3.3</a> released</li>
							<li>June 17, <a href="acomport.htm">ComPort for Android 2.4</a> released</li>
							<li>June 16, <a href="fwinrt.htm">WinRT for FireMonkey 1.3</a> released</li>
							<li>June 16, <a href="winrt.htm">WinRT 1.3</a> released</li>
							<li>June 16, <a href="xia.htm">Image Acquisition for macOS 1.4</a> released</li>
							<li>June 16, <a href="fwininet.htm">WinInet Component Suite for FireMonkey 1.5</a> released</li>
							<li>June 16, <a href="ioport.htm">IOPort 5.4</a> released</li>
							<li>June 15, <a href="csv.htm">CSV 5.7</a> released</li>
							<li>June 15, <a href="brotli.htm">Brotli 1.3</a> released</li>
							<li>June 13, <a href="officecs.htm">Office Component Suite 3.3</a> released</li>
							<li>June 13, <a href="wordcs.htm">Word Component Suite 3.3</a> released</li>
							<li>June 13, <a href="excelcs.htm">Excel Component Suite 3.3</a> released</li>
							<li>June 13, <a href="fhid.htm">HID for FireMonkey 2.4</a> released</li>
							<li>June 13, <a href="hid.htm">HID 1.9</a> released</li>
							<li>June 12, <a href="inatpdf.htm">Native PDF for iOS 1.3</a> released</li>
							<li>June 12, <a href="xnatpdf.htm">Native PDF for macOS 1.4</a> released</li>
							<li>June 12, <a href="fprotsuite.htm">Communication Protocol Suite for FireMonkey 1.8</a> released</li>
							<li>June 12, <a href="aauth.htm">Authentication for Android 1.2</a> released</li>
							<li>June 12, <a href="json.htm">JSON 4.6</a> released</li>
							<li>June 11, <a href="iauth.htm">Authentication for iOS 1.1</a> released</li>
							<li>June 11, <a href="mauth.htm">Authentication for macOS 1.1</a> released</li>
							<li>June 11, <a href="azip.htm">Zip for Android 1.9</a> released</li>
							<li>June 11, <a href="fsvgcanvas.htm">SVG Canvas for FireMonkey 1.3</a> released</li>
							<li>June 11, <a href="xcamera.htm">Camera for macOS 1.3</a> released</li>
							<li>June 11, <a href="icamera.htm">Camera for iOS 1.5</a> released</li>
							<li>June 10, <a href="fcamera.htm">Camera for FireMonkey 2.3</a> released</li>
							<li>June 9, <a href="apdflibrary.htm">PDF Library for Android 1.4</a> released</li>
							<li>June 9, <a href="aobrlib.htm">OBR Library for Android 5.1</a> released</li>
							<li>June 8, <a href="fbarcode.htm">Barcode for FireMonkey 5.4</a> released</li>
							<li>June 8, <a href="focr.htm">Optical Character Recognition for FireMonkey 5.2</a> released</li>
							<li>June 8, <a href="adonis.htm">Adonis Component Suite 6.4</a> released</li>
							<li>June 6, <a href="fdxjoystick.htm">DirectX Joystick for FireMonkey 1.6</a> released</li>
							<li>June 6, <a href="fjoystick.htm">Joystick for FireMonkey 1.4</a> released</li>
							<li>June 6, <a href="fburncs.htm">Burn CD/DVD/Blu-ray Component Suite for FireMonkey 1.4</a> released</li>
							<li>June 6, <a href="fwebview.htm">WebView for FireMonkey 1.6</a> released</li>
							<li>June 6, <a href="fnathid.htm">Native HID for FireMonkey 1.2</a> released</li>
							<li>June 6, <a href="faudiocs.htm">Audio Component Suite for FireMonkey 1.3</a> released</li>
							<li>June 5, <a href="fobr.htm">Optical Barcode Recognition for FireMonkey 3.4</a> released</li>
							<li>June 5, <a href="fobrlib.htm">OBR Library for FireMonkey 2.4</a> released</li>
							<li>June 5, <a href="adoxcs.htm">ADOX Component Suite 5.1</a> released</li>
							<li>June 5, <a href="jrocs.htm">JRO Component Suite 5.1</a> released</li>
							<li>June 5, <a href="adocs.htm">ADO Component Suite 5.1</a> released</li>
							<li>June 4, <a href="fpdfium.htm">PDFium Component Suite for FireMonkey 5.5</a> released</li>
							<li>June 4, <a href="xcomport.htm">ComPort for macOS 2.5</a> released</li>
							<li>June 4, <a href="fcomport.htm">ComPort for FireMonkey 2.1</a> released</li>
							<li>June 4, <a href="wiacs.htm">Image Acquisition Component Suite 1.5</a> released</li>
							<li>June 4, <a href="svgcanvas.htm">SVG Canvas 1.2</a> released</li>
							<li>June 3, <a href="smapi.htm">SimpleMAPI Component Suite 3.4</a> released</li>
							<li>June 3, <a href="portable.htm">Portable 1.4</a> released</li>
							<li>June 3, <a href="burncs.htm">Burn CD/DVD/Blu-ray Component Suite 4.3</a> released</li>
							<li>June 2, <a href="jsengine.htm">JSEngine 3.8</a> released</li>
							<li>June 2, <a href="ocr.htm">Optical Character Recognition 8.2</a> released</li>
							<li>June 2, <a href="pdfium.htm">PDFium Component Suite 5.8</a> released</li>
							<li>June 2, <a href="controller.htm">Controller 1.1</a> released</li>
							<li>June 1, <a href="dxjoystick.htm">DirectX Joystick 4.0</a> released</li>
							<li>June 1, <a href="joystick.htm">Joystick 4.4</a> released</li>
							<li>June 1, <a href="dao.htm">DAO Database Collection 5.8</a> released</li>
							<li>June 1, <a href="wininet.htm">WinInet Component Suite 4.2</a> released</li>

							<li>May 30, <a href="audiocs.htm">Audio Component Suite 2.3</a> released</li>
							<li>May 30, <a href="libre.htm">Libre 2.2</a> released</li>
							<li>May 30, <a href="webview.htm">WebView 1.6</a> released</li>
							<li>May 30, <a href="wcamera.htm">Camera 2.3</a> released</li>
							<li>May 30, <a href="obrlib.htm">OBR Library 2.4</a> released</li>
							<li>May 30, <a href="xml.htm">XML 1.3</a> released</li>
							<li>May 30, <a href="obr.htm">Optical Barcode Recognition 4.3</a> released</li>
							<li>May 30, <a href="barcode.htm">Barcode 4.9</a> released</li>
							<li>May 30, <a href="nathid.htm">Native HID 1.2</a> released</li>
							<li>May 30, <a href="protsuite.htm">Communication Protocol Suite 4.2</a> released</li>
							<li>May 30, <a href="comport.htm">ComPort 6.3</a> released</li>
							<li>May 29, <a href="nwebview.htm">WebView.NET 1.2</a> released</li>
							<li>May 26, <a href="npdfium.htm">PDFium Component Suite for .NET 4.0</a> released</li>
							<li>May 12, <a href="tlimport.htm">TypeLib Import 1.0</a> released</li>

							<li>March 21, <a href="officexml.htm">Office XML 2.4</a> released</li>
							<li>March 20, <a href="pdflibrary.htm">PDF Library 1.4</a> released</li>

							<li>January 8, <a href="nocra.htm">OCR.NET for Android 1.5</a> released</li>
							<li>January 3, <a href="nocr.htm">Optical Character Recognition for .NET 5.8</a> released</li>

							<li>December 30, <a href="nnfclib.htm">NFC.NET Library for Android 3.1</a> released</li>
							<li>December 3, <a href="nobr.htm">Optical Barcode Recognition for .NET 2.3</a> released</li>

							<li>October 29, <a href="nhid.htm">HID.NET 1.0</a> released</li>
							<li>October 18, <a href="nprotsuite.htm">Communication Protocol Suite for .NET 4.1</a> released</li>

							<li>July 16, <a href="ncomport.htm">ComPort.NET 4.0</a> released</li>
							<li>December 27, <a href="fiacs.htm">Image Acquisition Component Suite for FireMonkey 1.2</a> released</li>

							<li>June 18, <a href="doffice.htm">Direct Office 4.0</a> released</li>
							<li>May 9, <a href="nioport.htm">IOPort.NET 3.2</a> released</li>
							<li>July 22, <a href="comportdll.htm">ComPort DLL 2.1</a> released</li>
-->						</ul>
					</div>
				</div>
				<div class="clr"></div>
			</div>
		</div>

		<div class="footer">
			<div class="footer_resize">
				<p class="lf">Copyright &copy; 2020 WINSOFT. All rights reserved.</p>
				<p class="rf">Last updated October 9, 2020</p>
				<div class="clr"></div>
			</div>
		</div>
	</div>
</body>
</html>Hello, world!
Darwin Mac8BookPro2ssd.ht.home 15.6.0 Darwin Kernel Version 15.6.0: Thu Jun 21 20:07:40 PDT 2018; root:xnu-3248.73.11~1/RELEASE_X86_64 x86_64
The Glorious Glasgow Haskell Compilation System, version 8.8.3
Apple LLVM version 8.0.0 (clang-800.0.42.1)
Target: x86_64-apple-darwin15.6.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
total 512
drwxrwxrwx  42 admin1  staff   1428 Oct  9 12:09 .
drwxr-xr-x  20 admin1  staff    680 Oct  2 11:45 ..
-rwxrwxrwx@  1 admin1  staff  14340 Oct  9 11:27 .DS_Store
-rwxrwxrwx   1 admin1  staff     15 Jul 21 14:35 .gitignore
drwxrwxrwx   8 admin1  staff    272 Oct  9 12:01 .stack-work
-rwxrwxrwx   1 admin1  staff     42 Jul 21 14:35 ChangeLog.md
-rwxrwxrwx   1 admin1  staff     93 Aug 15 09:40 Girlfriend.txt
-rwxrwxrwx   1 admin1  staff     93 Oct  9 12:09 GirlfriendCaps.txt
-rw-r--r--   1 admin1  staff    520 Oct  9 12:09 L4-output-extra.txt
-rw-r--r--   1 admin1  staff  75218 Oct  9 12:09 L4-output.txt
-rwxrwxrwx   1 admin1  staff   4849 Oct  9 11:53 L4.cabal
-rwxrwxrwx   1 admin1  staff   1529 Jul 21 14:35 LICENSE
-rw-r--r--   1 admin1  staff    415 Oct  9 12:06 Main.class
-rw-r--r--   1 admin1  staff    149 Oct  6 18:49 Main.java
-rw-r--r--   1 admin1  staff     79 Oct  8 13:10 Main.js
-rwxrwxrwx   1 admin1  staff      5 Jul 21 14:35 README.md
drwxr-xr-x  10 admin1  staff    340 Oct  8 12:23 RUN
-rwxrwxrwx   1 admin1  staff     46 Jul 21 14:35 Setup.hs
-rwxr-xr-x   1 admin1  staff   8432 Oct  9 12:06 a.out
drwxrwxrwx   4 admin1  staff    136 Oct  1 21:09 app
-rw-r--r--   1 admin1  staff     13 Oct  9 12:09 file.txt
-rw-r--r--   1 admin1  staff     22 Oct  8 13:46 file1.txt
-rw-r--r--   1 admin1  staff     27 Oct  8 13:46 file2.txt
-rw-r--r--   1 admin1  staff     51 Oct  6 19:16 hello.py
-rwxrwxrwx   1 admin1  staff  17789 Jul 22 10:25 hlint.txt
-rw-r--r--   1 admin1  staff    110 Oct  9 09:41 main.c
-rwxrwxrwx   1 admin1  staff   2215 Oct  9 11:45 package.yaml
-rwxrwxrwx   1 admin1  staff      0 Jul 22 19:49 rep.txt
-rwxrwxrwx   1 admin1  staff    200 Jul 22 19:51 rep2.txt
-rwxrwxrwx   1 admin1  staff    608 Jul 23 17:23 rep3.txt
-rwxrwxrwx   1 admin1  staff   2649 Jul 23 18:36 rep4.txt
-rwxrwxrwx   1 admin1  staff   2542 Jul 23 18:37 rep5.txt
-rwxrwxrwx   1 admin1  staff   2351 Jul 23 18:40 rep6.txt
-rwxrwxrwx   1 admin1  staff  16248 Jul 23 18:40 report.html
drwxrwxrwx  42 admin1  staff   1428 Oct  9 11:50 src
-rwxrwxrwx   1 admin1  staff   2305 Oct  8 20:08 stack.yaml
-rwxrwxrwx   1 admin1  staff    447 Oct  8 20:09 stack.yaml.lock
drwxrwxrwx  62 admin1  staff   2108 Oct  8 18:15 stand_alone
drwxrwxrwx   4 admin1  staff    136 Oct  1 21:09 test
-rw-r--r--   1 admin1  staff     59 Oct  9 09:42 test.c
-rwxrwxrwx   1 admin1  staff   2022 Oct  9 12:09 todo.txt
-rwxrwxrwx   1 admin1  staff   2022 Oct  9 12:09 todo2.txt
Hello, world!
Hello, world!
Hello, world!
http://www.winsoft.sk



-------------  Simple HTTP conduit  -------------
I caught an exception.
Message =  HttpExceptionRequest Request {
  host                 = "doesNotExist"
  port                 = 80
  secure               = False
  requestHeaders       = [("Connection","close")]
  path                 = "/"
  queryString          = ""
  method               = "GET"
  proxy                = Nothing
  rawBody              = False
  redirectCount        = 10
  responseTimeout      = ResponseTimeoutDefault
  requestVersion       = HTTP/1.1
}
 (ConnectionFailure Network.Socket.getAddrInfo (called with preferred socket type/protocol: AddrInfo {addrFlags = [AI_ADDRCONFIG], addrFamily = AF_UNSPEC, addrSocketType = Stream, addrProtocol = 0, addrAddress = <assumed to be undefined>, addrCanonName = <assumed to be undefined>}, host name: Just "doesNotExist", service name: Just "80"): does not exist (nodename nor servname provided, or not known))
Type of exception = HttpException
http://doesNotExist

-------------  Simple HTTP conduit  -------------
I caught an exception.
Message =  HttpExceptionRequest Request {
  host                 = "localhost"
  port                 = 80
  secure               = False
  requestHeaders       = [("Connection","close")]
  path                 = "/"
  queryString          = ""
  method               = "GET"
  proxy                = Nothing
  rawBody              = False
  redirectCount        = 10
  responseTimeout      = ResponseTimeoutDefault
  requestVersion       = HTTP/1.1
}
 NoResponseDataReceived
Type of exception = HttpException
http://localhost

------------- show and read -------------
"3"
"[1,2,3]"
"(1,False)"
34
(1,False)


------------- ...Files... -------------
"Hello, world!"
func8A_main

------------- ...Random... -------------
31
(randomRIO (1, 100)

------------- ...Data.ByteString.Base16... -------------
"48656c6c6f2c20776f726c6421"
("Hello, world!","")
unpack encode decode

------------- ...Data.ByteString.Base64... -------------
"SGVsbG8sIHdvcmxkIQ=="
Right "Hello, world!"
unpack encode decode

------------- ...JSON... -------------
MyData {text = "Hello", number1 = 123}
"{\"number1\":123,\"text\":\"Hello\"}"
Just (MyData {text = "Hello", number1 = 123})
instance FromJSON instance ToJSON

------------- ...JSON... -------------
MyData2 {text2 = "Hello", number2 = 123}
"{\"text\":\"Hello\",\"number2\":123}"
Nothing
instance FromJSON instance ToJSON

------------- Email validation -------------
True
Right "eriksalaj@gmail.com"
Just "eriksalaj@gmail.com"
Just "eriksalaj@gmail.com"
"eriksalaj"
"gmail.com"
eriksalaj@gmail.com

------------- Functor -------------
Nothing
Just 3
[2,3,4]
14


------------- Applicative -------------
Just 1
Nothing
Just 3
[]
[2,3,4,2,4,6]
Just 1
Just 2
Nothing
Just 3
Nothing
Just 1
Nothing
Just 3
Nothing
Just 3
Nothing
Just 3
Nothing
Just 3


------------- Type class -------------
"Bool: True"
"Char: 'a'"
"Bool: True"
"Char: 'a'"


------------- Threads -------------
2
True
"Thread 2"
"Thread 3"
"Thread 1"
"Thread 3"
"Thread 1"
"Thread 2"
"Thread 1"
"Thread 3"
"Thread 2"


------------- CPU time -------------
10000000000
852874000000


------------- External command -------------


------------- Section -------------
0.5
2.0
print $ (1 /) 2
print $ (/ 1) 2

------------- Debug.Trace -------------
2
2
2

print $ trace "Calling 1 + 1" (1 + 1)
traceIO "Calling 1 + 1"
print $ traceShow (x, x + x) (x + x)

------------- Compiling and running C application, main.c -------------
N.B. Place 'main.c' file in the same folder where L4-exe is.

------------- 'Compiling' and running Java application, Main.java -------------
N.B. Place 'Main.java' file in the same folder where L4-exe is.

------------- 'Compiling' and running Python application, hello.py -------------
N.B. Place 'hello.py' file in the same folder where L4-exe is.

------------- Unuque values -------------
8
9
10


------------- Test.QuickCheck -------------
Args {replay = Nothing, maxSuccess = 100, maxDiscardRatio = 10, maxSize = 100, chatty = True, maxShrinks = 9223372036854775807}
[0,0,0]
[-2,2,2]
[1,3,1]
[3,-3,-6]
[-1,-1,-7]
[-9,-3,-6]
[5,-4,-5]
[-2,-7,-10]
[-4,-13,11]
[1,-16,-14]
[2,-5,11]
[]
[0,2]
[]
[-5,-1,1,1,4,6]
[5]
[-10,-8,-7,-4,-2,2,5,9]
[-12,-11,-8,-8,-5,5]
[-12,-9,-8,-8,-6,-3,-1,1,6,9,10,14,14]
[-9,10]
[-15,-14,-14,-11,-9,-8,-5,-5,-3,-1,0,1,4,8,17]
[-17,-7,-6,-3,4,9,15,18]
+++ OK, passed 100 tests.
Passed:
[]

Passed:
[-1]

Passed:
[0]

Passed:
[]

Passed:
[-1,-3]

Passed:
[1,4]

Passed:
[-6,-4,5,-4,5,-2]

Passed:
[2,5,-6]

Passed:
[-1]

Passed:
[]

Passed:
[-5,3,1,-8,0,1,-7,5]

Passed:
[0,3,7,-4,-9,-2,10,-2,-1]

Passed:
[10,-1,10]

Passed:
[-4,-3,-13,-5,9]

Passed:
[-11,-3,-10,9,-14,8,-14,-13]

Passed:
[-8,-13,-8,2,-10,10]

Passed:
[-5,11,-15]

Passed:
[-15,10,-17,-10,4,-16,-12,-12,7,6]

Passed:
[-5,1,17,-7,11]

Passed:
[18,16,-10,14,11,17,8,-9,-11,3]

Passed:
[-17,-9,17]

Passed:
[-15,-4,19,13,20,4,19,-14,-8,1,18,11,-3,-17,6,-10,-9,-13,8,10,-1]

Passed:
[]

Passed:
[7,-4,-13,-4,9,16]

Passed:
[5,-6,0,21,-24,9,19]

Passed:
[-16,9,-14,25,-24,25,2,1,-7,24,-12,-19,-4,10]

Passed:
[26,9,-6,-15,20,4,20,7,-7,7,6,-12,-17,22]

Passed:
[4,-3,5,0,15,10,13,-7,19,-24,25,-25,-24,17,1,23,-23,3,18,10]

Passed:
[-7,-28,16,-3,16,-15,-27,-21,-26,7]

Passed:
[0,-28,-6,21]

Passed:
[6,5,30,-8,-26,-3,21,7,10,18,27,13,-13,4,-1,29,-20,4,-4,17,-17,6,-13,21,13,23]

Passed:
[12,-11,18,8,30,7,23,-29,14,27,2,3,-4,29,-14,-3,-11,9,-25,30,-18,25,14,25,-31,0]

Passed:
[20,-27,22,6,-11,-24,-15,-23,7,10,22,30,28,3,29,-6,0,-23,13,17,-21,-23,-32,1,-15,14,12]

Passed:
[-25,20,18,24,30,4,-6,13,-29,31,-19,-12,14,-1,31,-30,-14,-28,25,-30,-22,-9,10,-13,-13,-2,10,0]

Passed:
[-10,-10,3,-15,-6,6,-22,11,-33,-15,-32,-19,10,-9,-29,-9,4,-7,-22,-25,-5,30,30,-19,6,5,28,-16]

Passed:
[-3,-30,23,-8,-12,22,-23,32,22,-1,-9,-15]

Passed:
[18,-17,-7,-32,5,13,10,-14,-20,-27,-28,-22,-19,-36,2,33,-19,21,-19,34,-15,36]

Passed:
[11,-28,8,9,9,19,10,-35,-36,36,7,7,-1,-23,-16,27,-4,32,3,-28,-2,-14,-13,2,11]

Passed:
[0,-11,-11,-1,-13,17,30,15,-29,32,1,-23,17,3,36,-8,0,4,-19,-35,-24,-10,-8,-10,23,20,20]

Passed:
[-31,24,31,4,-27,27,20,13,6,34,-6,32,-29]

Passed:
[3,34]

Passed:
[33,-5,6,-12,-12,-6,-39,-8,-12,-21,-13,1,-1,-23,-26,-18,36,-24,4]

Passed:
[30,3,42,22,-33,24,21,-18,26,-15,39,-29,-36]

Passed:
[7,14,-35,-39,-36,-3,-2,23,35,-34]

Passed:
[-18,2,-3,24,-25,-23,24,24,16,-22,32,37,20,-5,4,43,-17,33,18,-32,-26,30,-18,-7,-31,-33,-18,7,-18,-3,-36,33]

Passed:
[1,31,29]

Passed:
[-32,-3,23,-28,-8,1,-19,-4,4,-23,-41,8,8,-3,17,45,33,-25,39,-7,-5,-7]

Passed:
[-46,-39,18,0,36,-29,-36,18,33,-14,-36,21,-1,3,34,-11,-7,-28,41,-47,-36,27,-9,-44,-40,4,46]

Passed:
[]

Passed:
[-17,40,-27,34,19,-43]

Passed:
[20,9,-22,28,-5,6,15,27,16,-21,30,27,-7,-38,41,-46,-39,36,50,44,-34,11,-41,-5,-36,13,-43,-39,23,-47,-17,-26,-12,-28]

Passed:
[-37,-1,1,22,-4,-16,-19,25,-30,-40,-31,46,-29,16,17,43,-13,-48,-6,-49,21,-11,-48,-6,-36,-14,-32,-48,-43,44,32,-32,-32,-26,-34]

Passed:
[-50,11,51,-42,19,-18,52,-49,-13,-51,26,13,46,3,28,42,-5,16,-10,-39,-25,26,-27,3,-18,-24,24,46,-31,40,48,3,14,42,-37,-1,10,-34,-11,21,14,-18,8,-11,-52,-29,25]

Passed:
[-14,40,-27,-21,38,3,-11]

Passed:
[8,-2,-29,-48,-23,0,28,-21,17,9,-12,49,-29,52,48,10,21,33,-3,4,-16,-36,-20,-25,26,-16,30,4,19,-14,-36,33,-37,-22,21,-18,-23,-5]

Passed:
[-36,-10,-32,5,-13,-9,-25,42,-9,-27,29,9,-28,-16,48,28,51,-25,1,-34,-11,-24,11,10,-48,55,47,41,54,-4,18,5,13,19,-22,-9,-17,53,47,55,18,-19,-32]

Passed:
[-28,39,-47,-54,23,41,8,43,35,28,49,-29,23,-46,36,43,-50,1,-53,9,-3,-11,-10,-8,-49,49,-50,-28,14,-16,-17,-9,39,-51,48,-4,18,-13,-47,-28,48,-50,35,46,-22,-53,48,54,-47,46,-37,-28,12,22]

Passed:
[-26,-40,-36,-36,27,9,45,-17,26,22,-1]

Passed:
[-32,-9]

Passed:
[-45,-23,36,54,-23,15,-2,29,38,37,-22,29,6,24,-1,52,-40,-13,30,-55,-5,52,-35,-49,-59,-12,-33,-51,5,57,-4,-33,-9,43,55,-4,-36,-36,-46,56,-6,40,-8,-41,-21,13,31,-48]

Passed:
[]

Passed:
[-59,27,38,17,33,57,27,-56,-24,51,-14,20,-46,0,38,-44,-59,19,61,-59,-10,-26,-61,15,-30,48,-9,19,-16,-34,-44,48,38,-44,-20,16,34,30,36,-41,61,-44,-41,58,-6,45,-15,-55]

Passed:
[-36,57,-25,0,39,-14,-33,40,-54,-6,-50,-40,1,23,-20,17,-26,-59,58,-10,-42]

Passed:
[-42,-24,21,33,-33,0,-32,3,-38,1]

Passed:
[6,-44,19,-50,-54,2,63,12,2,41,-60,-19,-32,55,19,33,17,-32,-13,-19,41,-12,-25,1,-42,-36,59,8,-20,40,13,-10,43,-45,56,10,-5,-9,-7,-9,-47,-44,27,-17,38,-37,1,63,-17]

Passed:
[22,25,38,-12,-53,9,32,-49,8]

Passed:
[41,-11,-11,-21,35,-34,-58,61,37,-16,59,39,13,-55,61,49,-8,-18,7,-30,53,-15,-18,-16,-63,59,56,-16,55,17,4,1,5,-24,-47,9,47,-45,18,53,-24,40,33,66,12,-2,-23,-32,51,49]

Passed:
[25,-48,4,-47,-22,-27,-65,-15,-65,20,-52,0,-60,-33,-3,-29,31,13,55,-27,-31,37,-35,52,27,35,6,19,42,20,7,46,-48,-1,38,18,-14,-43,-58,52,33,55,-57,36,45,54,13,-63,-24,-42,33,-5,-21,57]

Passed:
[12,-45,-47,37,-63]

Passed:
[48,45,-3,-24,-65,63,-1,-41,0,22,-22,10,34,66,43,-6,5,-52,-69,-23,69,-58,10,-11,61,-27,-17,27,11,-34,-44,23,6,56,-46,-28,-35,10,46,-31,61,28,-29,56,-10,-43,-17,-34,-35,47,-52,-46,-16,55,-28,-28,31,38,0,40]

Passed:
[36,30,33,-3,-13,-29,50,62,37,-38,62,-2,8,-5,46,52,65,-22,-32,46,0,-7,-8,-66,-35,18]

Passed:
[27,-18,40,56,-53,-20,-64,-44,60,13,37,-59,-65,15,-42,-36,70,21,68]

Passed:
[24,50,-68,-9,-8,8,-14,-31,-47,-35,-1,-61,63,15,-4,48,65,-42,-38]

Passed:
[-14,-28,13,26,-28,-67,-42,37,-1,-26,-64,7,47,63,28,-56,-64,-2,-28,32,56,41,-31,-58,35,-36,-41,64,56,-17,10,18,40,-68,39,-51,61,-32,23,-64,-50,-15,-17,18,57,73,6,26,22,48,43,-35,43,4,36,-55,37,-37,66,60,-42,-67,-51,-23,21,-2,-1,8]

Passed:
[52]

Passed:
[-19,-17,-48,-75,-25,-75,70,-29,-73,-62,-31,36,-12,66,15,6,-31,-9,-21,65,12,-11,48,42,25,10,-24,27,-56,-54,58,29,55,-47,-36,-20,-65,-47,71,1,50,-8,6,-49,14,60,72,29,-17,55,-13,38,-72,-41,35,68]

Passed:
[49,-15,26,-74,-23,20,76,-23,55,32]

Passed:
[-58,60,12,-37,61,73,-30,-64,37,-18,-24,1,-77,40,-38,-1,-37,60,-29,-12,-13,0,49,-56,30,68,77,-64,-49,9,10,26,44,10,-5,-5,-14,48,47,-60,-56,77,-9,55,65,-24,59,53]

Passed:
[74,-77,-39,-52,19,77,77,-31,41,-17,-19,40,-64,-26,36,33,56,70,-24,47,17,7,14,-49,60,21,-78,9,55,42,-34,49,-76,-72,-25,-36,19,36,44,-41,-73,55,-77,76,78,11]

Passed:
[64]

Passed:
[36,-75,55,48,50,-42,-36,-10,-78,-8,-44,25,-38,32,-27,68,14,51,24,-25,-31,53,50,-5,8,55,-56,9,15,55,-4,69,10,9,40]

Passed:
[-14,-59,-13,-40,73,59,78,-37,50,-20,-36,46,-58,60,71,22,73,7,68,69,29,-56,-58,-31,24,-68,-78,-63,51,-62,-14,-55,19,75]

Passed:
[40,14,-30,50,-48,-16,35,66,30,-57,11,29,-13,73,-33,-21,-60,8,9,-81,82,-66,-8,59,34,-14,22,40,-74,15,-6,-37,-75,-44,-30,-67]

Passed:
[53,50,40,-22,-37,-54,15,57,80,-18,5,16,46,-29,-15,-4,-82,28,-35,26,-79,-76,73,-51,-62,52,71,1,-32,27,75,-34,-32,-21,-73,-67,73,57,-69,46,81,45,-14,31,72,83,2,17,-49,62,-36,29,62,36,22]

Passed:
[48,-55,-22,-68,34,21,76,84,-46,-32,0,72,-74,-54,-11,-76,35,-76,27,-67,48,10,-45,-54,-76,23,76,-39,-45,78,-13,41,-67,-36,50,54,-29,34]

Passed:
[36,16,21,-68,30,43,-42,79,64,0,-16,10,-51,-81,-21,-46,68,78,-85,-41,-35,-19,65,0,-18,-50,43,-41,-59,-46,20,48,25,59,26,-44,58,-72,-59,-70,48,36,7,-82,66,85,22,42,-16,-2,3,31,-39,46,17,70,19,68,-32,10,33,77,42,-48,21,-73,1,-9,-56,28,-23,-70,42,44,35,-75,-18,-38,-60,83,77]

Passed:
[68,-68,-47,-22,48,55,35,-77,-78,41,1,22,-50,-82,-19,81,-23,-42,-28,-3,20,-68,-64,66,-26,-52,-46,78,-78,2,-69,52,-42,49,-6,78,70,-76,48,74,63,6,-48,-19,-69,52,74,-67,-7,11,-86,-82,72,-74,78,-62,47,-34,69,5,30,-41,-3,-28,50,1,-7,-22,-31,51,-19,-67,66,-55,11,27,59,70,40]

Passed:
[-44,-23,38,2,-44,29,31,-43,34,64,78,41,-59,53,-62,-63,-46,26,-80,-66,72,-35,86,-22,52,-86,79,37,35,75,-73,49,-68,61,73,32,29,49,16,55,40,11,-20,-47,-3,-7,-4,-3,76,-5,74,-21,52,46,-81,78,85,57,16,9,41,-51,-73,-78,-42,-78,43,-68,69,-74,20,-11,-20,-12,32,14,-18,72,-70]

Passed:
[-23,82,28,-33,-18,-29,53,77,69]

Passed:
[27,-72,-52,-25,22,-82,77,-47,29,-56,-78,17,-27,73,19,5,21,-59,35,7,8,-76,-30,-20,67,-75,79,60,-73,-2,45,2,15,12,-48,-52]

Passed:
[-5,44,14,90,59,64,88,-47,-79,16,-74,-2,-8,-63,87,-42,75,14,15,5,39,-8,70,31,-9,66,-47,-21,-74,-28,-43,-81,-48,13,-79,12,-51,-1,4,79,-48,64,-76,-52,-22,10,-16,23,-4,32,71,54,69,-5,87,87,-8,85,-46,20,-3,-5,8,14,34,84,-89,-16,-60,14,-12,19,24,-88,78,31,0,-8,-41,73,-43,-9,-88,86,-81]

Passed:
[83,-53,-55,30,-28,-35,5,-1,-84,77,26,5,64,-79,26,86,40,-68,74,86,-37,34,-85,45,-43,-82,-12]

Passed:
[-20,-15,56,88,-52,-44,-32,25,2,38,16,51,91,-6,-69,36,47,12,90,10,-66,41,-26,13]

Passed:
[-22,81,-27,-56,35]

Passed:
[-88,27,15,59,44,-9,-17,66,57,8,79,-64,-67,17,72,-76,75,-5,85,-6,4,18,-53,36,27,26,-56,-94,-94,-20,-84,-64,16,-90,-13,-74,62,-11,11,37,25,-7,43,-12,5,71,-70,9,12,-61,-57,67,85,78,-22,87,47,6,-1,-81,-64,-21,74,-15,-45,-49,37,-13,52,-33,-29,42,90,-9,-10,17,71,-9,77,34,-9,27,69,30,76,-80,84,-27,9,-6,50,87]

Passed:
[-64,67,-28,5,48,37,57,57]

Passed:
[-52,-78,0,42,61,-23,89,-82,-26,-18,68,-22,-30,83,49,11,22,2,0,71,16,27,83,-21,64,-23,4,-46,-83,-37,78,33,-65,4,50,34,12,-28,46,-5,-59,50,-73,61,-44,-53,86,-94,0,41,-5,-40,-56,53,-89,63,-51,-4,-50,-57,-62,46,-71,-20,-70,4,-2,91,83,-34,-23,12,-7,17,-12,68,15,-70,83,0,-27,-69,47,7,63,-32,67]

Passed:
[-28,84,19,-49,-87,-77,-63,54,49,56,-28,-35,83,57,44,37,-77,-28,-13,-54,20,84,5,61,97,12,-57,48,-40,91,-30,-2,-56,18,37,9,80,-28]

Passed:
[-26,-96,16,24,71,51,31,-24,-32,-49,-84,48,-13,37,33,9,-68,94,33,-17,-64,70,-31,-7,30,80,41,8,58,51,62,-90,-78,43,-83,81,-63,-70,0,22,-2,-54,1,23,-93,91,14,-63,-95,-28,88,30,42,-79,-24,-37]

Passed:
[76,-94,-83,34,3,-32,16,41,46,-46,4,-18,-84,83,-38,-67,-47,-96,-19,69,32,17,-67,-22,64,-93,20,-40,2,-60,-3,17,-27,-91,60,4,50,-92,-31,30,79,-56,-96,-15,28,85,-97,-75,-80,-76,-44,20,83,-73,-65,24,-75,-45,-46,-5,-85,15,-76,45,-35,84,-61,39,0,-63,39,32,-79,-63,10,89,51,96,-72,31,45,79,-16,-6,-82]

+++ OK, passed 100 tests.


------------- Data.ByteString.UTF8 -------------
"\225\233\237"
"\195\161\195\169\195\173"
3
"\225\233\237"
áéí
→
λ>


------------- Type representations, import Data.Typeable -------------
Char
[Char]
[Char] -> IO ()
Nothing
Just True


------------- import Numeric -------------
"123"
"7b"
"173"
"1111011"
"123.456"
"1.23e2"
"123.46"
"123.46"
([1,2,3,4,5,6],3)
([7,11,7,4,11,12,6,10,7,14,15,9,13,12],2)


------------- import Data.Tree -------------
Node {rootLabel = "A", subForest = [Node {rootLabel = "B", subForest = []},Node {rootLabel = "C", subForest = [Node {rootLabel = "D", subForest = []},Node {rootLabel = "E", subForest = []}]}]}
A
|
+- B
|
`- C
   |
   +- D
   |
   `- E

B

C
|
+- D
|
`- E


["A","B","C","D","E"]
[["A"],["B","C"],["D","E"]]


------------- Binary serialization, - serialize, - cereal -------------
"{"
Right 123
"\NUL{"
Right 123
"a"
Right 'a'
"\NUL\NUL\NUL\NUL\NUL\NUL\NUL\ETXabc"
Right "abc"


------------- Integral -------------
30
-30
30
-31
3
-1
(30,3)
(-30,3)
(30,3)
(-31,-1)


------------- Data.IORef -------------
0
1
3


------------- import Control.Concurrent.STM, - stm -------------
5
25


------------- import System.ByteOrder, - byteorder -------------
LittleEndian


------------- import Text.Bytedump, - bytedump -------------
"64"
"48656c6c6f2c20776f726c6421"
" | 48 65 6c 6c 6f 2c 20 77 : 6f 72 6c 64 21           | Hello, world!"


------------- Data.UUID, Data.UUID.V1, Data.UUID.V1, Data.UUID.V3, Data.UUID.V4, Data.UUID.V5, - uuid -------------
00000000-0000-0000-0000-000000000000
True
(0,0,0,0)
00000001-0000-0002-0000-000300000004
"00000000-0000-0000-0000-000000000000"
Just 00000000-0000-0000-0000-000000000000
Just c933e780-0a49-11eb-8001-d49a20d74f58
37539b68-4aba-4e64-bb26-e828f311f2fb
6ba7b810-9dad-11d1-80b4-00c04fd430c8
6ba7b811-9dad-11d1-80b4-00c04fd430c8
6ba7b812-9dad-11d1-80b4-00c04fd430c8
6ba7b814-9dad-11d1-80b4-00c04fd430c8
1859bac1-5359-3006-a1e9-7a04ceeee108
6ba7b810-9dad-11d1-80b4-00c04fd430c8
6ba7b811-9dad-11d1-80b4-00c04fd430c8
6ba7b812-9dad-11d1-80b4-00c04fd430c8
6ba7b814-9dad-11d1-80b4-00c04fd430c8
0ab9d583-3b4d-5dee-88d8-7853f00de2de


------------- import System.Arch, import System.Endian, - cpu -------------
X86_64
LittleEndian
255


------------- import Network.HostName, - hostname -------------
"Mac8BookPro2ssd.ht.home"


------------- import Data.Digest.Pure.SHA, - SHA -------------
943a702d06f34599aee1f8da8ef9f7296031d699
8552d8b7a7dc5476cb9e25dee69a8091290764b7f2a64fe6e78e9568
315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3
55bc556b0d2fe0fce582ba5fe07baafff035653638c7ac0d5494c2a64c0bea1cc57331c7c12a45cdbca7f4c34a089eeb
c1527cd893c124773d811911970c8fe6e857d6df5dc9226bd8a160614c0cd963a4ddea2b94bb7d36021ef9d865d5cea294a82dd49a0bb269f51f6e7a57f79421
fed44b832f010916c6872a4122234e57638a2dfd
1d4378ff2f1ae944bfa70ed746e92e79ebd5e54e643a51cf72a05bb7
7579f2ef9632fa31ab440ab7fab06ce4511e7df233773c88302818b3b184595b
559f5ef48c4a9b181399b77581583eac94b96d65bee7693e711d491d549e5f9eaae5b56f69525dae2d0d581ca54beb5c
4c5947027b629bab8571613b4dc9d39afe9c80d3e8f1b0bb569e25135b0c4fd4547949b2a35411425d6dd4eddb6eea55012df94d0fd6a0618cf2e5a7e19879d1


------------- import Data.Digest.Pure.MD5, - pureMD5 -------------
6cd3556deb0da54bca060b4c39479839


------------- import Language.JavaScript.Parser, - language-javascript -------------
Right (JSAstProgram [JSFunction (JSAnnot (TokenPn 33 2 1) [CommentA (TokenPn 0 1 1) "// -- {-# START_FILE Main.js #-}",WhiteSpace (TokenPn 32 1 33) "\n"]) (JSIdentName (JSAnnot (TokenPn 42 2 10) [WhiteSpace (TokenPn 41 2 9) " "]) "test") (JSAnnot (TokenPn 46 2 14) []) JSLNil (JSAnnot (TokenPn 47 2 15) []) (JSBlock (JSAnnot (TokenPn 49 2 17) [WhiteSpace (TokenPn 48 2 16) " "]) [JSMethodCall (JSIdentifier (JSAnnot (TokenPn 53 3 3) [WhiteSpace (TokenPn 50 2 18) "\n  "]) "alert") (JSAnnot (TokenPn 58 3 8) []) (JSLOne (JSStringLiteral (JSAnnot (TokenPn 59 3 9) []) "'Hello, world!'")) (JSAnnot (TokenPn 74 3 24) []) (JSSemi (JSAnnot (TokenPn 75 3 25) []))] (JSAnnot (TokenPn 77 4 1) [WhiteSpace (TokenPn 76 3 26) "\n"])) JSSemiAuto] (JSAnnot (TokenPn 0 0 0) [WhiteSpace (TokenPn 78 4 2) "\n"]))
// -- {-# START_FILE Main.js #-}
function test() {
  alert('Hello, world!');
}

JavaScript Parser done

------------- import Crypto.Hash, - cryptohash -------------
"8cca0e965edd0e223b744f9cedf8e141"
"0abe9ee1f376caa1bcecad9042f16e73"
"6cd3556deb0da54bca060b4c39479839"
"58262d1fbdbe4530d8865d3518c6d6e41002610f"
"943a702d06f34599aee1f8da8ef9f7296031d699"
"8552d8b7a7dc5476cb9e25dee69a8091290764b7f2a64fe6e78e9568"
"315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3"
"55bc556b0d2fe0fce582ba5fe07baafff035653638c7ac0d5494c2a64c0bea1cc57331c7c12a45cdbca7f4c34a089eeb"
"c1527cd893c124773d811911970c8fe6e857d6df5dc9226bd8a160614c0cd963a4ddea2b94bb7d36021ef9d865d5cea294a82dd49a0bb269f51f6e7a57f79421"
"b5e5dd73a5894236937084131bb845189cdc5477579b9f36"
"a1a8703be5312b139b42eb331aa800ccaca0c34d58c6988e44f45489cfb16beb4b6bf0ce20be1db22a10b0e4bb680480a3d2429e6c483085453c098b65852495"


------------- import Data.Algorithm.DiffOutput, import Data.Algorithm.Diff - Diff -------------
[Both "first line" "first line",First "second line",Second "hello",Second "third line"]
[Both ["first line"] ["first line"],First ["second line"],Second ["hello","third line"]]
2c2,3
< second line
---
> hello
> third line



------------- import Codec.Compression.Zlib, - zlib -------------
"x\156\243H\205\201\201\215Q(\207/\202IQ\EOT\NUL ^\EOT\138"
"Hello, world!"


------------- import Codec.Compression.GZip, - zlib -------------
"\US\139\b\NUL\NUL\NUL\NUL\NUL\NUL\ETX\243H\205\201\201\215Q(\207/\202IQ\EOT\NUL\230\198\230\235\r\NUL\NUL\NUL"
"Hello, world!"


------------- import Linear, -import Linear Algebra, - linear -------------
V0
V1 1
V1 3
V1 (-1)
V1 2
V1 0.5
V2 1 2
V2 4 6
V2 (-2) (-2)
V2 3 8
V2 0.3333333333333333 0.5
V2 (-1) 0
V3 1 2 3
V3 5 7 9
V3 (-3) (-3) (-3)
V3 4 10 18
V3 0.25 0.4 0.5
V3 (-3) 6 (-3)
V4 1 2 3 4
V4 6 8 10 12
V4 (-4) (-4) (-4) (-4)
V4 5 12 21 32
V4 0.2 0.3333333333333333 0.42857142857142855 0.5
V4 1 2 3 0
V4 1 2 3 1
V3 0.0 0.0 0.0
V3 (-1) (-2) (-3)
V3 (V3 4 5 6) (V3 8 10 12) (V3 12 15 18)
V3 (V3 4 8 12) (V3 5 10 15) (V3 6 12 18)
V3 0.5 1.0 1.5
V3 12 15 18
[V3 1 0 0,V3 0 1 0,V3 0 0 1]
[V3 1 0 0,V3 0 1 0,V3 0 0 1]
V3 (V3 4 5 6) (V3 8 10 12) (V3 12 15 18)
False
True
15
V3 1 5 9
32
14
27
5.196152422706632
3.7416573867739413
V3 0.2672612419124244 0.5345224838248488 0.8017837257372732
V3 0.2672612419124244 0.5345224838248488 0.8017837257372732


------------- import Data.Matrix, - matrix -------------
┌             ┐
│  1  2  3  4 │
│  5  6  7  8 │
│  9 10 11 12 │
└             ┘
┌             ┐
│  1  2  3  4 │
│  5  6  7  8 │
│  9 10 11 12 │
└             ┘
┌             ┐
│  1  2  3  4 │
│  5  6  7  8 │
│  9 10 11 12 │
└             ┘
┌         ┐
│ 0 0 0 0 │
│ 0 0 0 0 │
│ 0 0 0 0 │
└         ┘
┌       ┐
│ 1 0 0 │
│ 0 1 0 │
│ 0 0 1 │
└       ┘
┌       ┐
│ 0 1 0 │
│ 1 0 0 │
│ 0 0 1 │
└       ┘
3
4
7
7
[5,6,7,8]
[3,7,11]
[1,6,11]
┌             ┐
│  1  2  3  4 │
│  5  6 13  8 │
│  9 10 11 12 │
└             ┘
┌          ┐
│  1  5  9 │
│  2  6 10 │
│  3  7 11 │
│  4  8 12 │
└          ┘
┌                         ┐
│  1  2  3  4  0  0  0  0 │
│  5  6  7  8  0  0  0  0 │
│  9 10 11 12  0  0  0  0 │
│  0  0  0  0  0  0  0  0 │
└                         ┘
┌             ┐
│  1  2  3  4 │
│  5  6  7  8 │
│ 18 20 22 24 │
└             ┘
┌       ┐
│  5  6 │
│  9 10 │
└       ┘
┌          ┐
│  5  7  8 │
│  9 11 12 │
└          ┘
(┌          ┐
│  1  2  3 │
│  5  6  7 │
└          ┘,┌    ┐
│  4 │
│  8 │
└    ┘,┌          ┐
│  9 10 11 │
└          ┘,┌    ┐
│ 12 │
└    ┘)
┌                   ┐
│  1  2  3  4  0  0 │
│  5  6  7  8  0  0 │
│  9 10 11 12  0  0 │
└                   ┘
┌             ┐
│  1  2  3  4 │
│  5  6  7  8 │
│  9 10 11 12 │
│  0  0  0  0 │
│  0  0  0  0 │
└             ┘
┌             ┐
│  1  2  3  4 │
│  5  6  7  8 │
│  9 10 11 12 │
└             ┘
┌             ┐
│  2  4  6  8 │
│ 10 12 14 16 │
│ 18 20 22 24 │
└             ┘
┌             ┐
│  1  2  3  4 │
│  5  6  7  8 │
│ 18 20 22 24 │
└             ┘
┌             ┐
│  1  2  3  4 │
│  5  6  7  8 │
│ 11 14 17 20 │
└             ┘
┌             ┐
│  5  6  7  8 │
│  1  2  3  4 │
│  9 10 11 12 │
└             ┘
Just (┌                                       ┐
│                3.0                4.0 │
│                0.0 0.6666666666666667 │
└                                       ┘,┌                                       ┐
│                1.0                0.0 │
│ 0.3333333333333333                1.0 │
└                                       ┘,┌         ┐
│ 0.0 1.0 │
│ 1.0 0.0 │
└         ┘,-1.0)
18
66
1
-2.0


------------- Tower of Hanoi -------------
[(Tower1,Tower2),(Tower1,Tower3),(Tower2,Tower3),(Tower1,Tower2),(Tower3,Tower1),(Tower3,Tower2),(Tower1,Tower2)]


------------- C Parser, import Language.C, - language-c -------------
CTranslUnit [CFDefExt (CFunDef [CTypeSpec (CIntType (NodeInfo ("test.c": line 1) (("test.c": line 1),3) (Name {nameId = 1})))] (CDeclr (Just (Ident "main" 232419565 (NodeInfo ("test.c": line 1) (("test.c": line 1),4) (Name {nameId = 0})))) [CFunDeclr (Right ([],False)) [] (NodeInfo ("test.c": line 1) (("test.c": line 1),1) (Name {nameId = 3}))] Nothing [] (NodeInfo ("test.c": line 1) (("test.c": line 1),4) (Name {nameId = 2}))) [] (CCompound [] [CBlockStmt (CExpr (Just (CCall (CVar (Ident "printf" 232434916 (NodeInfo ("test.c": line 2) (("test.c": line 2),6) (Name {nameId = 4}))) (NodeInfo ("test.c": line 2) (("test.c": line 2),6) (Name {nameId = 5}))) [CConst (CStrConst "Hello, world!\n" (NodeInfo ("test.c": line 2) (("test.c": line 2),17) (Name {nameId = 6})))] (NodeInfo ("test.c": line 2) (("test.c": line 2),1) (Name {nameId = 7})))) (NodeInfo ("test.c": line 2) (("test.c": line 2),1) (Name {nameId = 8}))),CBlockStmt (CReturn (Just (CConst (CIntConst 0 (NodeInfo ("test.c": line 3) (("test.c": line 3),1) (Name {nameId = 9}))))) (NodeInfo ("test.c": line 3) (("test.c": line 3),1) (Name {nameId = 10})))] (NodeInfo ("test.c": line 1) (("test.c": line 4),1) (Name {nameId = 11}))) (NodeInfo ("test.c": line 1) (("test.c": line 4),1) (Name {nameId = 12})))] (NodeInfo ("test.c": line 1) (("test.c": line 4),1) (Name {nameId = 13}))
int main()
{
    printf("Hello, world!\n");
    return 0;
}
It does not parse '//', '#', '/*' !!!

------------- Fibonacci version: 1 -------------
[0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181]


------------- Fibonacci version: 2 -------------
[0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181]


------------- Fibonacci version: 3 -------------
[0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181]


------------- Fibonacci version: 4 -------------
[0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181]


------------- import Data.Either, import Prelude hiding (error) -------------
Left "MyError"
Right 123
True
False
False
True
"Error: MyError"
"Value: 123"
"\"MyError\""
"124"
0
123
["MyError"]
[123]
(["MyError"],[123])


------------- Coin change, version 1 -------------
4


------------- Coin change, version 2 -------------
[[8,1,1],[5,5],[5,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]]
[5,5]


------------- Coin change, version 3 -------------
Just [5,5]


------------- Queens -------------
..X.
X...
...X
.X..

.X..
...X
X...
..X.


Using GHC Options, {-# OPTIONS_GHC -fwarn-missing-signatures #-}
Hello, world!
function With Missing Declaration produces something
, like this:  warning: [-Wmissing-signatures]
Top-level binding with no type signature:funcWithMissingDeclaration :: IO ()


Using {-# LANGUAGE PackageImports #-}
fromList "a"

------------- import Data.Monoid
 -------------
Sum {getSum = 10}
10
Sum {getSum = 0}
Sum {getSum = 30}
Sum {getSum = 30}
Sum {getSum = 60}
Product {getProduct = 10}
10
Product {getProduct = 200}
First {getFirst = Just 10}
First {getFirst = Just 20}
Last {getLast = Just 20}
Last {getLast = Just 20}
Any {getAny = False}
Any {getAny = True}
All {getAll = False}
All {getAll = True}
Dual {getDual = First {getFirst = Just 20}}
Dual {getDual = First {getFirst = Just 10}}
11
32

module DataVector, import Data.Vector, - vector, Prelud hidding some funcs
""
"a"
"bbbbbbbbbb"
[0,2,4,6,8,10,12,14,16,18]
[100,101,102,103,104,105,106,107,108,109]
[10,11,12,13,14]
[2,5,8,11,14,17,20,23,26,29]
[10,11,12,13,14,15,16,17,18,19,20]
[10,12,14,16,18,20]
[1,2,3,4,5]
[1,2,3]
"cccccccccc"
10
False
True
1
Just 1
Nothing
module DataVector done

------------- Cellular automation -------------
                                X                                
                               X X                               
                              X   X                              
                             X X X X                             
                            X       X                            
                           X X     X X                           
                          X   X   X   X                          
                         X X X X X X X X                         
                        X               X                        
                       X X             X X                       
                      X   X           X   X                      
                     X X X X         X X X X                     
                    X       X       X       X                    
                   X X     X X     X X     X X                   
                  X   X   X   X   X   X   X   X                  
                 X X X X X X X X X X X X X X X X                 
                X                               X                
               X X                             X X               
              X   X                           X   X              
             X X X X                         X X X X             
            X       X                       X       X            
           X X     X X                     X X     X X           
          X   X   X   X                   X   X   X   X          
         X X X X X X X X                 X X X X X X X X         
        X               X               X               X        
       X X             X X             X X             X X       
      X   X           X   X           X   X           X   X      
     X X X X         X X X X         X X X X         X X X X     
    X       X       X       X       X       X       X       X    
   X X     X X     X X     X X     X X     X X     X X     X X   
  X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X  
 X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X 

............................
############ Console Output Ends here ############
N.B. Some outputs, produced by exteranl apps, like Main.c, Main.java etc.
